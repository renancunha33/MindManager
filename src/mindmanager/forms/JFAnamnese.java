package mindmanager.forms;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import mindmanager.bancodedados.ConexaoImpressao;
import mindmanager.dao.pacienteDao;
import mindmanager.logica.Impressao;
import mindmanager.logica.atributos;
import net.sf.jasperreports.engine.JRException;


/**
 *
 * @author Eagle Tech
 */
public class JFAnamnese extends javax.swing.JDialog {
      DefaultTableModel tmPacientes = new DefaultTableModel(null, new String []{"CÃ³digo","Nome"});
    List<atributos> pacientes;
    ListSelectionModel lsmPacientes;

    /** Creates new form NewJDialog */
    public JFAnamnese(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jTAnamnese.setEnabledAt(1, false);
         this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/mindmanager/imagens/logo_mindmanager(48x48).png")));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTAnamnese = new javax.swing.JTabbedPane();
        jPAnamnese = new javax.swing.JPanel();
        jLAnamnese = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAAnamnese = new javax.swing.JTextArea();
        jLSelecione = new javax.swing.JLabel();
        jTPesquisar = new javax.swing.JTextField();
        jBPesquisa = new javax.swing.JButton();
        jBAdicionar = new javax.swing.JButton();
        jBImprimir = new javax.swing.JButton();
        jTCodigo = new javax.swing.JTextField();
        jPPaciente = new javax.swing.JPanel();
        jSPaciente = new javax.swing.JScrollPane();
        jTPaciente = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Anamneses");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLAnamnese.setText("Digite as perguntas da anamnese");

        jTAAnamnese.setColumns(20);
        jTAAnamnese.setEditable(false);
        jTAAnamnese.setRows(5);
        jTAAnamnese.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTAAnamneseKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTAAnamneseKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTAAnamnese);

        jLSelecione.setText("Selecione o paciente:");

        jTPesquisar.setEditable(false);

        jBPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Start-Menu-Search-icon.png"))); // NOI18N
        jBPesquisa.setText("Buscar");
        jBPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisaActionPerformed(evt);
            }
        });

        jBAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/add (25x25).png"))); // NOI18N
        jBAdicionar.setToolTipText("Adicionar");
        jBAdicionar.setEnabled(false);
        jBAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdicionarActionPerformed(evt);
            }
        });

        jBImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/print-icon.png"))); // NOI18N
        jBImprimir.setText("Imprimir");
        jBImprimir.setEnabled(false);
        jBImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImprimirActionPerformed(evt);
            }
        });

        jTCodigo.setEditable(false);

        javax.swing.GroupLayout jPAnamneseLayout = new javax.swing.GroupLayout(jPAnamnese);
        jPAnamnese.setLayout(jPAnamneseLayout);
        jPAnamneseLayout.setHorizontalGroup(
            jPAnamneseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPAnamneseLayout.createSequentialGroup()
                .addGroup(jPAnamneseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPAnamneseLayout.createSequentialGroup()
                        .addGap(501, 501, 501)
                        .addComponent(jBImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                    .addGroup(jPAnamneseLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPAnamneseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPAnamneseLayout.createSequentialGroup()
                                .addComponent(jLSelecione)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTCodigo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBPesquisa)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBAdicionar))
                            .addGroup(jPAnamneseLayout.createSequentialGroup()
                                .addComponent(jLAnamnese)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPAnamneseLayout.setVerticalGroup(
            jPAnamneseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAnamneseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPAnamneseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLSelecione)
                    .addComponent(jTPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAdicionar)
                    .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLAnamnese)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBImprimir)
                .addGap(21, 21, 21))
        );

        jTAnamnese.addTab("Anamnese", jPAnamnese);

        jTPaciente.setModel(tmPacientes);
        jTPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTPacienteMouseClicked(evt);
            }
        });
        jSPaciente.setViewportView(jTPaciente);

        javax.swing.GroupLayout jPPacienteLayout = new javax.swing.GroupLayout(jPPaciente);
        jPPaciente.setLayout(jPPacienteLayout);
        jPPacienteLayout.setHorizontalGroup(
            jPPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
        );
        jPPacienteLayout.setVerticalGroup(
            jPPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );

        jTAnamnese.addTab("Paciente", jPPaciente);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/bg.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jTAnamnese, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jTAnamnese, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-659)/2, (screenSize.height-472)/2, 659, 472);
    }// </editor-fold>//GEN-END:initComponents
String anamnese="";
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       sair();
    }//GEN-LAST:event_formWindowClosing

    private void jTAAnamneseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAAnamneseKeyPressed
        if (jTAAnamnese.getText().length() < 1000) {
            anamnese = jTAAnamnese.getText();
        }


        if (jTAAnamnese.getText().length() > 999) {
            if (evt.getKeyCode() != 10) {
                jTAAnamnese.setText("");
                jTAAnamnese.setText(anamnese);
            }

        }
    }//GEN-LAST:event_jTAAnamneseKeyPressed

    private void jTAAnamneseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAAnamneseKeyReleased
        if (jTAAnamnese.getText().length() < 1000) {
            anamnese = jTAAnamnese.getText();
        }


        if (jTAAnamnese.getText().length() > 999) {
            if (evt.getKeyCode() != 10) {
                jTAAnamnese.setText("");
                jTAAnamnese.setText(anamnese);
            }

        }
    }//GEN-LAST:event_jTAAnamneseKeyReleased

    private void jBPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisaActionPerformed
        try {
            jTPesquisar.setText("");
            listarPacientes();
            jTAnamnese.setEnabledAt(1, true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Problemas no botÃ£o de pesquisa. \n " + ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Nenhhum paciente encontrado. \n" + e);
        }
    }//GEN-LAST:event_jBPesquisaActionPerformed

    private void jBAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdicionarActionPerformed
        try {
            alteraPaciente();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Problema no botÃ£o alterar.\n"+ ex);
        }
    }//GEN-LAST:event_jBAdicionarActionPerformed

    private void jBImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImprimirActionPerformed
        if (!jTAAnamnese.getText().equals("")) {
            abrirRelatorioClientes();
        } else {
            JOptionPane.showMessageDialog(null, "Digite algo na anamnese para ser impresso.", "AtenÃ§Ã£o", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jBImprimirActionPerformed

    private void jTPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTPacienteMouseClicked
        linhaSelecionadaPacientes(jTPaciente);
    }//GEN-LAST:event_jTPacienteMouseClicked
 
    //Adiciona anamnese na ficha do paciente
    private void alteraPaciente() throws SQLException {
        if(jTPaciente.getSelectedRow() != -1){
             UIManager.put("OptionPane.noButtonText", "NÃ£o");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
            int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente adicionar anamnese?", "ConfirmaÃ§Ã£o", 0,3);
         if (resp == 0){
              if(verificaDados()){
                atributos at = new atributos();
                pacienteDao dao =  new pacienteDao();
                
                at.setAnamnese(jTAAnamnese.getText());
                at.setNomePaciente(jTPesquisar.getText());
                dao.adicionaAnamnese(at);
                 JOptionPane.showMessageDialog(null,"Anamnese adicionada com sucesso.","Anamnese",JOptionPane.INFORMATION_MESSAGE);
                  listarPacientes();
                  anamnese="";
                     jTAAnamnese.setEditable(false);
                      jBAdicionar.setEnabled(false);
                     
                  jTAnamnese.setSelectedComponent(jPAnamnese);
                   
            }
        }
         }
           
         }
 
 
    
    public boolean verificaDados(){
        if(jTAAnamnese.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Adicione alguma pergunta.","Erro.", JOptionPane.WARNING_MESSAGE);
        return false;
        }else{
            return true;
        }
        
    }
    
    //Joga os dados da linha selecionada na tabela para os TextFields
   private void linhaSelecionadaPacientes(JTable tabela){
          
        if(jTPaciente.getSelectedRow()!=-1){
            
        jTCodigo.setText(String.valueOf(pacientes.get(tabela.getSelectedRow()).getCodigoPaciente()));    
        jTPesquisar.setText(pacientes.get(tabela.getSelectedRow()).getNomePaciente());
        jTAAnamnese.setText(pacientes.get(tabela.getSelectedRow()).getAnamnese());
        jTAnamnese.setSelectedComponent(jPAnamnese);
        jTAnamnese.setEnabledAt(1, false);
        jTAAnamnese.setEditable(true);
        jBAdicionar.setEnabled(true);
        jBImprimir.setEnabled(true);
        anamnese = jTAAnamnese.getText();
        } else{
            
           jTAAnamnese.setText("");
       }
      
    }
   
   //MÃ©todo de impressÃ£o
   public void abrirRelatorioClientes() {
	 
	    // note que estamos chamando o novo relatÃ³rio
	    InputStream inputStream = getClass().getResourceAsStream( "/Anamneses.jasper" );
	 
	    // mapa de parÃ¢metros do relatÃ³rio
	    Map parametros = new HashMap();
	 
	    /*
	     * Insere o parÃ¢metro primeiroNome no mapa, com o valor F%
	     * ou seja, todos os clientes que tenham primeiro nome comeÃ§ando
	     * com a letra F.
	     */
	    parametros.put( "codigoPaciente", jTCodigo.getText() );
	 
	    // outros possÃ­veis parÃ¢metros aqui...
	 
	    try {
	 
	        // abre o relatÃ³rio
	        Impressao.openReport( "Anamneses", inputStream, parametros,
	                ConexaoImpressao.getMindConnection() );
                
	  this.dispose();
	    } catch ( SQLException exc ) {
	        exc.printStackTrace();
	    } catch ( JRException exc ) {
	        exc.printStackTrace();
	    }
	 
	}
   
   
    //Mostra pesquisa realizada
    private void mostraPesquisaPaciente(List<atributos> pacientes) {
      while(tmPacientes.getRowCount()>0){
          tmPacientes.removeRow(0);
      }
        if(pacientes.isEmpty()){
          JOptionPane.showMessageDialog(null,"Nenhum paciente encontrado.","Pesquisa",JOptionPane.INFORMATION_MESSAGE);
      }else{
            jTAnamnese.setSelectedComponent(jPPaciente);
          String []linha = new String [] {null, null};
          for (int i = 0; i < pacientes.size(); i++){
              tmPacientes.addRow(linha);
              tmPacientes.setValueAt(pacientes.get(i).getCodigoPaciente(), i, 0);
              tmPacientes.setValueAt(pacientes.get(i).getNomePaciente(), i, 1);
          }
      }
    }
    
    //Lista a pesquisa realizada
    protected void listarPacientes() throws SQLException{
        pacienteDao dao = new pacienteDao ();
       pacientes = dao.getListaNomePaciente("%" + jTPesquisar.getText() + "%");
        mostraPesquisaPaciente(pacientes);
    }
    
     public void sair(){
         UIManager.put("OptionPane.noButtonText", "NÃ£o");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
         int x = JOptionPane.showConfirmDialog(null, "Deseja encerrar a anamnese?", "Alerta",0, 2);
        
        if (x==0) {
        this.dispose();
        
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JFAnamnese dialog = new JFAnamnese(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAdicionar;
    private javax.swing.JButton jBImprimir;
    private javax.swing.JButton jBPesquisa;
    private javax.swing.JLabel jLAnamnese;
    private javax.swing.JLabel jLSelecione;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPAnamnese;
    private javax.swing.JPanel jPPaciente;
    private javax.swing.JScrollPane jSPaciente;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAAnamnese;
    private javax.swing.JTabbedPane jTAnamnese;
    private javax.swing.JTextField jTCodigo;
    private javax.swing.JTable jTPaciente;
    private javax.swing.JTextField jTPesquisar;
    // End of variables declaration//GEN-END:variables
}
