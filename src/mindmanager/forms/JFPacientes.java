package mindmanager.forms;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import mindmanager.bancodedados.ConexaoImpressao;
import mindmanager.bancodedados.criarConexao;
import mindmanager.dao.consultaDao;
import mindmanager.dao.pacienteDao;
import mindmanager.logica.Impressao;
import mindmanager.logica.atributos;
import net.sf.jasperreports.engine.JRException;

public class JFPacientes extends javax.swing.JDialog {

     private Connection conexao;
    /**
     * Creates new form NewJDialog
     */
    public JFPacientes(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        
        
        jLValidacao.setVisible(false);
        jLDtInvalida.setVisible(false);
        
        //Coencta ao banco de dados
        this.conexao = criarConexao.getConexao();
   
   preencheConvenio(); 
       
         //Inicializa os anos no ComboBox da data de nascimento
           DateFormat dataa = new SimpleDateFormat("yyyy");
      Date date = new Date();
      String data = dataa.format(date);
          for(int i=Integer.valueOf(data);i>=1887;i--){
                  jCAno.addItem(String.valueOf(i));
              }
          listarPacientes();
          
          //Organiza a largura das colunas na tabela de consultas
          jTConsultas.getColumnModel().getColumn(0).setPreferredWidth(120);
         jTConsultas.getColumnModel().getColumn(1).setPreferredWidth(60);
         jTConsultas.getColumnModel().getColumn(2).setPreferredWidth(200);
         jTConsultas.getColumnModel().getColumn(3).setPreferredWidth(180);
         jTConsultas.getColumnModel().getColumn(4).setPreferredWidth(80);
         
         //Organiza a largura das colunas na tabela de pesquisa
         jTDados.getColumnModel().getColumn(0).setPreferredWidth(40);
         jTDados.getColumnModel().getColumn(1).setPreferredWidth(200);
         
           this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/mindmanager/imagens/logo_mindmanager(48x48).png")));
    }

    DefaultTableModel tmConsultas = new DefaultTableModel(null, new String []{"Data", "Horário","Paciente", "Psicólogo(a)", "Status", "Pagamento"});
    List<atributos> consultas;
    ListSelectionModel lsmConsultas;
    
    DefaultTableModel tmPacientes = new DefaultTableModel(null, new String []{"Código","Nome","RG","CPF"});
    List<atributos> pacientes;
    ListSelectionModel lsmPacientes;
    
     DefaultTableModel tmConvenios = new DefaultTableModel(null, new String []{"Código","Nome"});
    List<atributos> convenios;
    ListSelectionModel lsmConvenios;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPBotoes = new javax.swing.JPanel();
        jBAlterar = new javax.swing.JButton();
        jBSalvar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jBImprimir = new javax.swing.JButton();
        jBNovo = new javax.swing.JButton();
        jBExcluir = new javax.swing.JButton();
        jBPesquisa = new javax.swing.JButton();
        jTPacientes = new javax.swing.JTabbedPane();
        jPDados = new javax.swing.JPanel();
        jPDadosPacientes = new javax.swing.JPanel();
        jLSexo = new javax.swing.JLabel();
        jCEstadoCivil = new javax.swing.JComboBox();
        jCSexo = new javax.swing.JComboBox();
        jLCodigo = new javax.swing.JLabel();
        jTEstCivil = new javax.swing.JLabel();
        jLProfissao = new javax.swing.JLabel();
        jLObs = new javax.swing.JLabel();
        jSObs = new javax.swing.JScrollPane();
        jTObs = new javax.swing.JTextArea();
        jTProfissao = new javax.swing.JTextField();
        jLRg = new javax.swing.JLabel();
        jTConjugue = new javax.swing.JTextField();
        jLNacionalidade = new javax.swing.JLabel();
        jLConvenio = new javax.swing.JLabel();
        jLMotivo = new javax.swing.JLabel();
        jLConjugue = new javax.swing.JLabel();
        jSMotivo = new javax.swing.JScrollPane();
        jTMotivo = new javax.swing.JTextArea();
        jTCodigo = new javax.swing.JTextField();
        jTResponsavel = new javax.swing.JTextField();
        jLResponsavel = new javax.swing.JLabel();
        jTRgResp = new javax.swing.JTextField();
        jTNome = new javax.swing.JTextField();
        jLCpf = new javax.swing.JLabel();
        jLRgResp = new javax.swing.JLabel();
        jLNome = new javax.swing.JLabel();
        jLDataNasc = new javax.swing.JLabel();
        jTNacionalidade = new javax.swing.JTextField();
        jTRg = new javax.swing.JFormattedTextField();
        jLValidacao = new javax.swing.JLabel();
        jFTCpf = new javax.swing.JTextField();
        jCDia = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jCMes = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jCAno = new javax.swing.JComboBox();
        jLObrNome = new javax.swing.JLabel();
        jLObrSexo = new javax.swing.JLabel();
        jLObrDtNasc = new javax.swing.JLabel();
        jLObrRg = new javax.swing.JLabel();
        jLObrCpf = new javax.swing.JLabel();
        jLObrNac = new javax.swing.JLabel();
        jLObrProfissao = new javax.swing.JLabel();
        jLObrEstCivil = new javax.swing.JLabel();
        jLDtInvalida = new javax.swing.JLabel();
        jTDtNasc = new javax.swing.JLabel();
        jBProximo = new javax.swing.JButton();
        jCConvenio = new javax.swing.JComboBox();
        jPEnd = new javax.swing.JPanel();
        jPContato = new javax.swing.JPanel();
        jLTelRes = new javax.swing.JLabel();
        jLTelCom = new javax.swing.JLabel();
        jLCel = new javax.swing.JLabel();
        jLId = new javax.swing.JLabel();
        jLTelRec = new javax.swing.JLabel();
        jLEmail = new javax.swing.JLabel();
        jFTelRes = new javax.swing.JFormattedTextField();
        jFTelCom = new javax.swing.JFormattedTextField();
        jFId = new javax.swing.JFormattedTextField();
        jFTelRec = new javax.swing.JFormattedTextField();
        jTEmail = new javax.swing.JTextField();
        jFCel = new javax.swing.JFormattedTextField();
        jLObrContato = new javax.swing.JLabel();
        jPEndereco = new javax.swing.JPanel();
        jLRua = new javax.swing.JLabel();
        jLNumero = new javax.swing.JLabel();
        jLComplemento = new javax.swing.JLabel();
        jLBairro = new javax.swing.JLabel();
        jLUf = new javax.swing.JLabel();
        jTRua = new javax.swing.JTextField();
        jTNumero = new javax.swing.JTextField();
        jTComplemento = new javax.swing.JTextField();
        jCEstado = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        jTPais = new javax.swing.JTextField();
        jLCep = new javax.swing.JLabel();
        jFTCep = new javax.swing.JFormattedTextField();
        jLObrCep = new javax.swing.JLabel();
        jLObrRua = new javax.swing.JLabel();
        jLObrNum = new javax.swing.JLabel();
        jLObrBairro = new javax.swing.JLabel();
        jLObrUf = new javax.swing.JLabel();
        jLObrPais = new javax.swing.JLabel();
        jTBairro = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLObrCidade = new javax.swing.JLabel();
        jTCidade = new javax.swing.JTextField();
        jBProximo2 = new javax.swing.JButton();
        jBAnterior = new javax.swing.JButton();
        jPConsultas = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jSConsultas = new javax.swing.JScrollPane();
        jTConsultas = new javax.swing.JTable();
        jBProximo3 = new javax.swing.JButton();
        jBAnterior2 = new javax.swing.JButton();
        jPPesquisa = new javax.swing.JPanel();
        jPTabela = new javax.swing.JPanel();
        jSPesquisa = new javax.swing.JScrollPane();
        jTDados = new javax.swing.JTable();
        jLPesquisa = new javax.swing.JLabel();
        jCPesquisa = new javax.swing.JComboBox();
        jBPesquisar = new javax.swing.JButton();
        jTPesquisar = new javax.swing.JTextField();
        jBVoltar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cadastro de Pacientes");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(942, 601));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jPBotoes.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jBAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/pencil (25x25).png"))); // NOI18N
        jBAlterar.setText("Alterar");
        jBAlterar.setEnabled(false);
        jBAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlterarActionPerformed(evt);
            }
        });

        jBSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/disk (25x25).png"))); // NOI18N
        jBSalvar.setText("Salvar");
        jBSalvar.setEnabled(false);
        jBSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalvarActionPerformed(evt);
            }
        });

        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/ico_delete.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.setEnabled(false);
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/print-icon.png"))); // NOI18N
        jBImprimir.setText("Imprimir");
        jBImprimir.setEnabled(false);
        jBImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImprimirActionPerformed(evt);
            }
        });

        jBNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/add (25x25).png"))); // NOI18N
        jBNovo.setText("Novo");
        jBNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovoActionPerformed(evt);
            }
        });

        jBExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/lixo (25x25).png"))); // NOI18N
        jBExcluir.setText("Excluir");
        jBExcluir.setEnabled(false);
        jBExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExcluirActionPerformed(evt);
            }
        });

        jBPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Start-Menu-Search-icon (1).png"))); // NOI18N
        jBPesquisa.setText("Pesquisar");
        jBPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPBotoesLayout = new javax.swing.GroupLayout(jPBotoes);
        jPBotoes.setLayout(jPBotoesLayout);
        jPBotoesLayout.setHorizontalGroup(
            jPBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBNovo, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPBotoesLayout.setVerticalGroup(
            jPBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jBImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPBotoes);
        jPBotoes.setBounds(730, 140, 160, 300);

        jPDadosPacientes.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados "));
        jPDadosPacientes.setToolTipText("Próxima aba");

        jLSexo.setText("Sexo:");

        jCEstadoCivil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Solteiro(a)", "Casado(a)", "Separado(a)", "Divorciado(a)", "Viúvo(a)" }));
        jCEstadoCivil.setEnabled(false);
        jCEstadoCivil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCEstadoCivilActionPerformed(evt);
            }
        });
        jCEstadoCivil.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCEstadoCivilKeyPressed(evt);
            }
        });

        jCSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "F", "M" }));
        jCSexo.setEnabled(false);
        jCSexo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCSexoKeyPressed(evt);
            }
        });

        jLCodigo.setText("Código:");

        jTEstCivil.setText("Estado Civil:");

        jLProfissao.setText("Profissão:");

        jLObs.setText("Observações:");

        jTObs.setColumns(20);
        jTObs.setRows(5);
        jTObs.setEnabled(false);
        jTObs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTObsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTObsKeyReleased(evt);
            }
        });
        jSObs.setViewportView(jTObs);

        jTProfissao.setEditable(false);
        jTProfissao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProfissaoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTProfissaoKeyReleased(evt);
            }
        });

        jLRg.setText("RG:");

        jTConjugue.setEditable(false);
        jTConjugue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTConjugueKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTConjugueKeyReleased(evt);
            }
        });

        jLNacionalidade.setText("Nacionalidade:");

        jLConvenio.setText("Convênio:");

        jLMotivo.setText("Motivo:");

        jLConjugue.setText("Cônjuge:");

        jTMotivo.setColumns(20);
        jTMotivo.setRows(5);
        jTMotivo.setEnabled(false);
        jTMotivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTMotivoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTMotivoKeyReleased(evt);
            }
        });
        jSMotivo.setViewportView(jTMotivo);

        jTCodigo.setEditable(false);

        jTResponsavel.setEditable(false);
        jTResponsavel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTResponsavelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTResponsavelKeyReleased(evt);
            }
        });

        jLResponsavel.setText("Responsável:");

        jTRgResp.setEditable(false);
        jTRgResp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRgRespKeyPressed(evt);
            }
        });

        jTNome.setEditable(false);
        jTNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTNomeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTNomeKeyReleased(evt);
            }
        });

        jLCpf.setText("CPF:");

        jLRgResp.setText("RG do Responsável:");

        jLNome.setText("Nome:");

        jLDataNasc.setText("Data de Nascimento:");

        jTNacionalidade.setEditable(false);
        jTNacionalidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTNacionalidadeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTNacionalidadeKeyReleased(evt);
            }
        });

        jTRg.setEditable(false);
        jTRg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRgKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTRgKeyReleased(evt);
            }
        });

        jLValidacao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jFTCpf.setEditable(false);
        jFTCpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTCpfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTCpfKeyReleased(evt);
            }
        });

        jCDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dia", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jCDia.setEnabled(false);
        jCDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCDiaActionPerformed(evt);
            }
        });
        jCDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCDiaKeyPressed(evt);
            }
        });

        jLabel4.setText("/");

        jCMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mês", "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        jCMes.setEnabled(false);
        jCMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCMesActionPerformed(evt);
            }
        });
        jCMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCMesKeyPressed(evt);
            }
        });

        jLabel2.setText("/");

        jCAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ano" }));
        jCAno.setEnabled(false);
        jCAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCAnoActionPerformed(evt);
            }
        });
        jCAno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCAnoKeyPressed(evt);
            }
        });

        jLObrNome.setText("(*)");

        jLObrSexo.setText("(*)");

        jLObrDtNasc.setText("(*)");

        jLObrRg.setText("(*)");

        jLObrCpf.setText("(*)");

        jLObrNac.setText("(*)");

        jLObrProfissao.setText("(*)");

        jLObrEstCivil.setText("(*)");

        jLDtInvalida.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLDtInvalida.setForeground(new java.awt.Color(255, 0, 51));

        jTDtNasc.setEnabled(false);

        jBProximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon.png"))); // NOI18N
        jBProximo.setToolTipText("Próxima aba");
        jBProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximoActionPerformed(evt);
            }
        });

        jCConvenio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Escolha" }));
        jCConvenio.setEnabled(false);

        javax.swing.GroupLayout jPDadosPacientesLayout = new javax.swing.GroupLayout(jPDadosPacientes);
        jPDadosPacientes.setLayout(jPDadosPacientesLayout);
        jPDadosPacientesLayout.setHorizontalGroup(
            jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLObrDtNasc)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPDadosPacientesLayout.createSequentialGroup()
                                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLDataNasc)
                                    .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                            .addComponent(jLObrSexo)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLSexo))
                                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLCodigo)
                                            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                                .addComponent(jLObrNome)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLNome)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                        .addComponent(jCDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLDtInvalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTNome, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 163, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPDadosPacientesLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLObrRg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLRg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTRg, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLObrCpf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLCpf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFTCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLValidacao, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLMotivo)
                                    .addComponent(jLConvenio)
                                    .addComponent(jLObs))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSObs)
                                    .addComponent(jSMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLObrNac)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLNacionalidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTNacionalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jLObrEstCivil)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTEstCivil)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jCEstadoCivil, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                        .addComponent(jLResponsavel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                            .addGap(53, 53, 53)
                                            .addComponent(jLConjugue)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTConjugue, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPDadosPacientesLayout.createSequentialGroup()
                                            .addGap(29, 29, 29)
                                            .addComponent(jLObrProfissao)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLProfissao)
                                            .addGap(4, 4, 4)
                                            .addComponent(jTProfissao, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                        .addComponent(jLRgResp)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTRgResp, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addComponent(jTDtNasc)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPDadosPacientesLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jBProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPDadosPacientesLayout.setVerticalGroup(
            jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLNome)
                    .addComponent(jLObrNome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLSexo)
                    .addComponent(jLObrSexo)
                    .addComponent(jCSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTDtNasc))
                .addGap(4, 4, 4)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLDataNasc)
                        .addComponent(jLObrDtNasc)
                        .addComponent(jCDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jCMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jCAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLDtInvalida, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLRg)
                            .addComponent(jTRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLObrRg)
                            .addComponent(jLObrCpf)
                            .addComponent(jLCpf)
                            .addComponent(jFTCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTNacionalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLNacionalidade)
                            .addComponent(jLObrNac))
                        .addGap(6, 6, 6)
                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLProfissao)
                                    .addComponent(jLObrProfissao)))
                            .addComponent(jTProfissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTEstCivil)
                                    .addComponent(jLObrEstCivil)))
                            .addComponent(jCEstadoCivil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLValidacao, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLConjugue))
                    .addComponent(jTConjugue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLResponsavel))
                    .addComponent(jTResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosPacientesLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLRgResp))
                    .addComponent(jTRgResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLConvenio)
                    .addComponent(jCConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLMotivo)
                    .addComponent(jSMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLObs)
                    .addComponent(jSObs, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jBProximo))
        );

        javax.swing.GroupLayout jPDadosLayout = new javax.swing.GroupLayout(jPDados);
        jPDados.setLayout(jPDadosLayout);
        jPDadosLayout.setHorizontalGroup(
            jPDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPDadosPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPDadosLayout.setVerticalGroup(
            jPDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPDadosPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTPacientes.addTab("Dados Gerais", jPDados);

        jPContato.setBorder(javax.swing.BorderFactory.createTitledBorder("Contato"));

        jLTelRes.setText("Telefone Residencial:");

        jLTelCom.setText("Telefone Comercial:");

        jLCel.setText("Celular:");

        jLId.setText("ID:");

        jLTelRec.setText("Telefone Para Recado:");

        jLEmail.setText("E-mail:");

        jFTelRes.setEditable(false);
        jFTelRes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTelResKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTelResKeyReleased(evt);
            }
        });

        jFTelCom.setEditable(false);
        jFTelCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTelComKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTelComKeyReleased(evt);
            }
        });

        jFId.setEditable(false);
        jFId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFIdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFIdKeyReleased(evt);
            }
        });

        jFTelRec.setEditable(false);
        jFTelRec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTelRecKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTelRecKeyReleased(evt);
            }
        });

        jTEmail.setEditable(false);
        jTEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTEmailKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTEmailKeyReleased(evt);
            }
        });

        jFCel.setEditable(false);
        jFCel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFCelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFCelKeyReleased(evt);
            }
        });

        jLObrContato.setText("Preencha pelo menos um campo de contato");

        javax.swing.GroupLayout jPContatoLayout = new javax.swing.GroupLayout(jPContato);
        jPContato.setLayout(jPContatoLayout);
        jPContatoLayout.setHorizontalGroup(
            jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPContatoLayout.createSequentialGroup()
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPContatoLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPContatoLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPContatoLayout.createSequentialGroup()
                                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLTelRec)
                                    .addComponent(jLId)
                                    .addComponent(jLCel)
                                    .addComponent(jLTelCom)
                                    .addComponent(jLTelRes))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jFTelRec, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFId, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFTelCom, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFTelRes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                    .addComponent(jFCel, javax.swing.GroupLayout.Alignment.LEADING)))))
                    .addGroup(jPContatoLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLObrContato)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPContatoLayout.setVerticalGroup(
            jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPContatoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLObrContato)
                .addGap(18, 18, 18)
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLTelRes)
                    .addComponent(jFTelRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTelCom)
                    .addComponent(jFTelCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCel)
                    .addComponent(jFCel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLId)
                    .addComponent(jFId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTelRec)
                    .addComponent(jFTelRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLEmail)
                    .addComponent(jTEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPEndereco.setBorder(javax.swing.BorderFactory.createTitledBorder("Endereço"));

        jLRua.setText("Logradouro:");

        jLNumero.setText("Número:");

        jLComplemento.setText("Complemento:");

        jLBairro.setText("Bairro:");

        jLUf.setText("UF:");

        jTRua.setEditable(false);
        jTRua.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRuaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTRuaKeyReleased(evt);
            }
        });

        jTNumero.setEditable(false);
        jTNumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTNumeroKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTNumeroKeyReleased(evt);
            }
        });

        jTComplemento.setEditable(false);
        jTComplemento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTComplementoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTComplementoKeyReleased(evt);
            }
        });

        jCEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AC", "AL", "AM", "AP", "BA", "CE", "DF", "ES", "GO", "MA", "MG", "MS", "MT", "PA", "PB", "PE", "PI", "PR", "RJ", "RN", "RO", "RR", "RS", "SC", "SE", "SP", "TO" }));
        jCEstado.setEnabled(false);
        jCEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCEstadoActionPerformed(evt);
            }
        });
        jCEstado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCEstadoKeyPressed(evt);
            }
        });

        jLabel20.setText("País:");

        jTPais.setEditable(false);
        jTPais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTPaisKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTPaisKeyReleased(evt);
            }
        });

        jLCep.setText("CEP:");

        jFTCep.setEditable(false);
        jFTCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTCepKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTCepKeyReleased(evt);
            }
        });

        jLObrCep.setText("(*)");

        jLObrRua.setText("(*)");

        jLObrNum.setText("(*)");

        jLObrBairro.setText("(*)");

        jLObrUf.setText("(*)");

        jLObrPais.setText("(*)");

        jTBairro.setEditable(false);
        jTBairro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTBairroKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTBairroKeyReleased(evt);
            }
        });

        jLabel19.setText("Cidade:");

        jLObrCidade.setText("(*)");

        jTCidade.setEditable(false);
        jTCidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCidadeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTCidadeKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPEnderecoLayout = new javax.swing.GroupLayout(jPEndereco);
        jPEndereco.setLayout(jPEnderecoLayout);
        jPEnderecoLayout.setHorizontalGroup(
            jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEnderecoLayout.createSequentialGroup()
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEnderecoLayout.createSequentialGroup()
                        .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEnderecoLayout.createSequentialGroup()
                                .addComponent(jLObrPais)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20))
                            .addGroup(jPEnderecoLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLObrNum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLNumero))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEnderecoLayout.createSequentialGroup()
                                .addComponent(jLObrBairro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLBairro)))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEnderecoLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLObrRua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLRua)))
                .addGap(9, 9, 9)
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPEnderecoLayout.createSequentialGroup()
                        .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPEnderecoLayout.createSequentialGroup()
                                .addComponent(jTBairro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLObrCidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19)
                                .addGap(18, 18, 18)
                                .addComponent(jTCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPEnderecoLayout.createSequentialGroup()
                                .addComponent(jTNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLComplemento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(0, 102, Short.MAX_VALUE))
                    .addGroup(jPEnderecoLayout.createSequentialGroup()
                        .addComponent(jTRua, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(182, Short.MAX_VALUE))
                    .addGroup(jPEnderecoLayout.createSequentialGroup()
                        .addComponent(jTPais, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPEnderecoLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLObrUf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLUf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLObrCep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLCep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFTCep, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPEnderecoLayout.setVerticalGroup(
            jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEnderecoLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCep)
                    .addComponent(jLObrCep)
                    .addComponent(jLUf)
                    .addComponent(jLObrUf)
                    .addComponent(jCEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFTCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLRua)
                    .addComponent(jLObrRua)
                    .addComponent(jTRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPEnderecoLayout.createSequentialGroup()
                        .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLBairro)
                            .addComponent(jTBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLObrBairro))
                        .addGap(4, 4, 4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEnderecoLayout.createSequentialGroup()
                        .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLObrCidade)
                            .addComponent(jTCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLNumero)
                    .addComponent(jLComplemento)
                    .addComponent(jTComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLObrNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLObrPais)
                    .addComponent(jLabel20)
                    .addComponent(jTPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        jBProximo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon.png"))); // NOI18N
        jBProximo2.setToolTipText("Próxima aba");
        jBProximo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximo2ActionPerformed(evt);
            }
        });

        jBAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon2.png"))); // NOI18N
        jBAnterior.setToolTipText("Aba anterior");
        jBAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnteriorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPEndLayout = new javax.swing.GroupLayout(jPEnd);
        jPEnd.setLayout(jPEndLayout);
        jPEndLayout.setHorizontalGroup(
            jPEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEndLayout.createSequentialGroup()
                .addGroup(jPEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPEndLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPContato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPEndereco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPEndLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBProximo2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPEndLayout.setVerticalGroup(
            jPEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEndLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPContato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBProximo2)
                    .addComponent(jBAnterior))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTPacientes.addTab("Endereço e Contato", jPEnd);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTConsultas.setModel(tmConsultas);
        jSConsultas.setViewportView(jTConsultas);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSConsultas, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jBProximo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon.png"))); // NOI18N
        jBProximo3.setToolTipText("Próxima aba");
        jBProximo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximo3ActionPerformed(evt);
            }
        });

        jBAnterior2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon2.png"))); // NOI18N
        jBAnterior2.setToolTipText("Aba anterior");
        jBAnterior2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnterior2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPConsultasLayout = new javax.swing.GroupLayout(jPConsultas);
        jPConsultas.setLayout(jPConsultasLayout);
        jPConsultasLayout.setHorizontalGroup(
            jPConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPConsultasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPConsultasLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBAnterior2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBProximo3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPConsultasLayout.setVerticalGroup(
            jPConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPConsultasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBProximo3)
                    .addComponent(jBAnterior2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTPacientes.addTab("Consultas", jPConsultas);

        jPTabela.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTDados.setModel(tmPacientes);
        jTDados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTDadosMouseClicked(evt);
            }
        });
        jSPesquisa.setViewportView(jTDados);

        javax.swing.GroupLayout jPTabelaLayout = new javax.swing.GroupLayout(jPTabela);
        jPTabela.setLayout(jPTabelaLayout);
        jPTabelaLayout.setHorizontalGroup(
            jPTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSPesquisa)
                .addContainerGap())
        );
        jPTabelaLayout.setVerticalGroup(
            jPTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPTabelaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLPesquisa.setText("Busca por:");

        jCPesquisa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome", "Código", "RG", "CPF" }));
        jCPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCPesquisaActionPerformed(evt);
            }
        });

        jBPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Start-Menu-Search-icon.png"))); // NOI18N
        jBPesquisar.setText("Pesquisar");
        jBPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisarActionPerformed(evt);
            }
        });

        jTPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTPesquisarKeyReleased(evt);
            }
        });

        jBVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon2.png"))); // NOI18N
        jBVoltar.setToolTipText("Voltar à primeira aba");
        jBVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPPesquisaLayout = new javax.swing.GroupLayout(jPPesquisa);
        jPPesquisa.setLayout(jPPesquisaLayout);
        jPPesquisaLayout.setHorizontalGroup(
            jPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPesquisaLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLPesquisa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPesquisar)
                .addGap(28, 28, 28))
            .addGroup(jPPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPesquisaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPPesquisaLayout.setVerticalGroup(
            jPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBPesquisar)
                    .addComponent(jTPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLPesquisa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBVoltar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTPacientes.addTab("Pesquisa", jPPesquisa);

        getContentPane().add(jTPacientes);
        jTPacientes.setBounds(50, 20, 660, 560);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("(*) -> Campos obrigatórios");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(720, 540, 160, 14);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 950, 590);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-944)/2, (screenSize.height-622)/2, 944, 622);
    }// </editor-fold>//GEN-END:initComponents
String nac, profissao, conjugue, responsavel, cpf, tel, telCom, cel, id ,telRec,cep, obs, motivo
        ,rgresp,nome,rg,email,numero,rua,compl,bairro,cidade,pais;//Variáveis para controle de quantidade de caracteres digitados e bloqueio de 
//letras em campos númericos
    private void jBAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlterarActionPerformed

        try {
            upperCase();
            validaCPF();
            alteraPaciente();


        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Problema no botão alterar.\n"+ex);
        }
    }//GEN-LAST:event_jBAlterarActionPerformed

    private void jBSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalvarActionPerformed
        upperCase();
        validaCPF();
        try {
            cadastrarPaciente();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Problema no botão salvar.\n"+ex);
        }

       nome = "";
            obs = "";
            motivo ="";
            cpf="";
            nac="";
       profissao="";
       conjugue="";
       responsavel="";
       rgresp ="";
       tel ="";
       telCom="";
       cel ="";
       id = "";
       telRec="";
        rua="";
       numero="";
       bairro="";
       cidade="";
       compl="";
       cidade="";
       pais="";
       cep = "";



    }//GEN-LAST:event_jBSalvarActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed

        limparDados();
        desabilitaDados();
        jTPacientes.setSelectedComponent(jPDados);
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImprimirActionPerformed
      if (verificaDados()) {
           impressaoPaciente();
        } else {
            JOptionPane.showMessageDialog(null, "Todos os campos obrigatórios devem ser preenchidos para impressão.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jBImprimirActionPerformed

    private void jBNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovoActionPerformed

        habilitaDados();
        limparDados();
        jBAlterar.setEnabled(false);
        jTPacientes.setSelectedComponent(jPDados);
        jTNome.requestFocus();
    }//GEN-LAST:event_jBNovoActionPerformed

    private void jBExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExcluirActionPerformed
        try {
            excluirPaciente();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro no botão Excluir.\n" + ex);
        }
    }//GEN-LAST:event_jBExcluirActionPerformed

    private void jCEstadoCivilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCEstadoCivilActionPerformed
        verificaEstadoCivil();
        verificaIdade();
    }//GEN-LAST:event_jCEstadoCivilActionPerformed

    private void jCEstadoCivilKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCEstadoCivilKeyPressed
        if (evt.getKeyCode() == 10) {
            jTConjugue.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            //upperCase();
            jTProfissao.requestFocus();
        }
    }//GEN-LAST:event_jCEstadoCivilKeyPressed

    private void jCSexoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCSexoKeyPressed
        if (evt.getKeyCode() == 10) {
            jCDia.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            //upperCase();
            jTNome.requestFocus();
        }
    }//GEN-LAST:event_jCSexoKeyPressed

    private void jTObsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTObsKeyPressed
        if (jTObs.getText().length() < 200) {
            obs = jTObs.getText();
        }


        if (jTObs.getText().length() > 199) {
            if (evt.getKeyCode() != 10) {
                jTObs.setText("");
                jTObs.setText(obs);
            }

        }
    }//GEN-LAST:event_jTObsKeyPressed

    private void jTObsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTObsKeyReleased
        if (jTObs.getText().length() < 200) {
            obs = jTObs.getText();
        }


        if (jTObs.getText().length() > 199) {
            if (evt.getKeyCode() != 10) {
                jTObs.setText("");
                jTObs.setText(obs);
            }

        }
    }//GEN-LAST:event_jTObsKeyReleased

    private void jTProfissaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProfissaoKeyPressed
        if (evt.getKeyCode() == 10) {
            jCEstadoCivil.requestFocus();
        }

        if (jTProfissao.getText().length() < 40) {


            profissao = jTProfissao.getText();


        }

        if (jTProfissao.getText().length() > 39) {
            if (evt.getKeyCode() != 10) {
                jTProfissao.setText("");
                jTProfissao.setText(profissao);
            }

        }

        if (evt.getKeyCode() == 38) {
            // upperCase();
            jTNacionalidade.requestFocus();
        }
    }//GEN-LAST:event_jTProfissaoKeyPressed

    private void jTProfissaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProfissaoKeyReleased


        if (jTProfissao.getText().length() < 40) {


            profissao = jTProfissao.getText();


        }

        if (jTProfissao.getText().length() > 39) {
            if (evt.getKeyCode() != 10) {
                jTProfissao.setText("");
                jTProfissao.setText(profissao);
            }

        }
    }//GEN-LAST:event_jTProfissaoKeyReleased

    private void jTConjugueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTConjugueKeyPressed
        if (evt.getKeyCode() == 10) {
            jTResponsavel.requestFocus();
        }

        if (jTConjugue.getText().length() < 80) {

            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105) {
                jTConjugue.setText("");
                jTConjugue.setText(conjugue);
            } else {
                conjugue = jTConjugue.getText();
            }

        }

        if (jTConjugue.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTConjugue.setText("");
                jTConjugue.setText(conjugue);
            }

        }

        if (evt.getKeyCode() == 38) {
            //upperCase();
            jCEstadoCivil.requestFocus();
        }
    }//GEN-LAST:event_jTConjugueKeyPressed

    private void jTConjugueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTConjugueKeyReleased


        if (jTConjugue.getText().length() < 80) {

            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105) {
                jTConjugue.setText("");
                jTConjugue.setText(conjugue);
            } else {
                conjugue = jTConjugue.getText();
            }

        }

        if (jTConjugue.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTConjugue.setText("");
                jTConjugue.setText(conjugue);
            }

        }

    }//GEN-LAST:event_jTConjugueKeyReleased

    private void jTMotivoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTMotivoKeyPressed

        if (jTMotivo.getText().length() < 200) {
            motivo = jTMotivo.getText();
        }


        if (jTMotivo.getText().length() > 199) {
            if (evt.getKeyCode() != 10) {
                jTMotivo.setText("");
                jTMotivo.setText(motivo);
            }

        }



        if (evt.getKeyCode() == 18) {
            upperCase();
            jTObs.requestFocus();
        }
    }//GEN-LAST:event_jTMotivoKeyPressed

    private void jTMotivoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTMotivoKeyReleased
        if (jTMotivo.getText().length() < 200) {
            motivo = jTMotivo.getText();
        }


        if (jTMotivo.getText().length() > 199) {
            if (evt.getKeyCode() != 10) {
                jTMotivo.setText("");
                jTMotivo.setText(motivo);
            }

        }
    }//GEN-LAST:event_jTMotivoKeyReleased

    private void jTResponsavelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTResponsavelKeyPressed
        if (evt.getKeyCode() == 10) {
            jTRgResp.requestFocus();
        }

        if (jTResponsavel.getText().length() < 80) {

            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105) {
                jTResponsavel.setText("");
                jTResponsavel.setText(responsavel);
            } else {
                responsavel = jTResponsavel.getText();
            }

        }

        if (jTResponsavel.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTResponsavel.setText("");
                jTResponsavel.setText(responsavel);
            }

        }

        if (evt.getKeyCode() == 38) {
            upperCase();
            if (jTConjugue.isEnabled()) {
                jTConjugue.requestFocus();
            } else {
                jCEstadoCivil.requestFocus();
            }
        }

    }//GEN-LAST:event_jTResponsavelKeyPressed

    private void jTResponsavelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTResponsavelKeyReleased


        if (jTResponsavel.getText().length() < 80) {

            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105) {
                jTResponsavel.setText("");
                jTResponsavel.setText(responsavel);
            } else {
                responsavel = jTResponsavel.getText();
            }

        }

        if (jTResponsavel.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTResponsavel.setText("");
                jTResponsavel.setText(responsavel);
            }

        }


    }//GEN-LAST:event_jTResponsavelKeyReleased

    private void jTRgRespKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRgRespKeyPressed
        if (evt.getKeyCode() == 10) {
            jTMotivo.requestFocus();
        }

        if (jTRgResp.getText().length() < 15) {
            rgresp = jTRgResp.getText();
        }


        if (jTRgResp.getText().length() > 14) {
            if (evt.getKeyCode() != 10) {
                jTRgResp.setText("");
                jTRgResp.setText(rgresp);
            }

        }

        if (evt.getKeyCode() == 38) {
            upperCase();
            jTResponsavel.requestFocus();
        }
    }//GEN-LAST:event_jTRgRespKeyPressed

    private void jTNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNomeKeyPressed

        if (evt.getKeyCode() == 10) {
            jCSexo.requestFocus();
        }

        if (jTNome.getText().length() < 80) {

            nome = jTNome.getText();

        }

        if (jTNome.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTNome.setText("");
                jTNome.setText(nome);
            }

        }

    }//GEN-LAST:event_jTNomeKeyPressed

    private void jTNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNomeKeyReleased



        if (jTNome.getText().length() < 80) {


            nome = jTNome.getText();

        }

        if (jTNome.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTNome.setText("");
                jTNome.setText(nome);
            }

        }
    }//GEN-LAST:event_jTNomeKeyReleased

    private void jTNacionalidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNacionalidadeKeyPressed
        if (evt.getKeyCode() == 10) {
            jTProfissao.requestFocus();
        }

        if (jTNacionalidade.getText().length() < 30) {


            nac = jTNacionalidade.getText();


        }

        if (jTNacionalidade.getText().length() > 29) {
            if (evt.getKeyCode() != 10) {
                jTNacionalidade.setText("");
                jTNacionalidade.setText(nac);
            }

        }

        if (evt.getKeyCode() == 38) {
            //upperCase();
            jFTCpf.requestFocus();
        }
    }//GEN-LAST:event_jTNacionalidadeKeyPressed

    private void jTNacionalidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNacionalidadeKeyReleased


        if (jTNacionalidade.getText().length() < 30) {


            nac = jTNacionalidade.getText();


        }

        if (jTNacionalidade.getText().length() > 29) {
            if (evt.getKeyCode() != 10) {
                jTNacionalidade.setText("");
                jTNacionalidade.setText(nac);
            }

        }

    }//GEN-LAST:event_jTNacionalidadeKeyReleased

    private void jTRgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRgKeyPressed
        if (evt.getKeyCode() == 38) {
            jCAno.requestFocus();
        }

        if (evt.getKeyCode() == 10) {
            jFTCpf.requestFocus();
        }


        if (jTRg.getText().length() < 15) {
            rg = jTRg.getText();
        }

        if (jTRg.getText().length() > 14) {
            if (evt.getKeyCode() != 10) {
                jTRg.setText("");
                jTRg.setText(rg);
            }

        }
    }//GEN-LAST:event_jTRgKeyPressed

    private void jTRgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRgKeyReleased


        if (jTRg.getText().length() < 15) {
            rg = jTRg.getText();
        }


        if (jTRg.getText().length() > 14) {
            if (evt.getKeyCode() != 10) {
                jTRg.setText("");
                jTRg.setText(rg);
            }

        }
    }//GEN-LAST:event_jTRgKeyReleased

    private void jFTCpfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTCpfKeyPressed
        //pula linha ao apertar shift ou alt
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTNacionalidade.requestFocus();
        }

        if (jFTCpf.getText().length() <= 11) {

            jLValidacao.setVisible(false);
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cpf = jFTCpf.getText();
                validaCPF();


            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                validaCPF();
                jFTCpf.setText("");
                jFTCpf.setText(cpf);
            }
        } else {
            jFTCpf.setText("");
            jFTCpf.setText(cpf);
        }



        if (jFTCpf.getText().length() > 11) {
            if (evt.getKeyCode() != 10) {
                jFTCpf.setText("");
                jFTCpf.setText(cpf);

            }

        }
        //pula linha ao digitar enter
        if (evt.getKeyCode() == 10) {
            jTNacionalidade.requestFocus();
        }
        //sobe um campo ao pressionar a seta pra cima
        if (evt.getKeyCode() == 38) {
            //upperCase();
            jTRg.requestFocus();
        }
    }//GEN-LAST:event_jFTCpfKeyPressed

    private void jFTCpfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTCpfKeyReleased

        if (jFTCpf.getText().length() <= 11) {

            jLValidacao.setVisible(false);
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {//Impede que o usuário digite letras
                cpf = jFTCpf.getText();
                validaCPF();//mostra mensagem se o cpf é válido ou não


            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);

                jFTCpf.setText("");
                jFTCpf.setText(cpf);
            }
        } else {
            jFTCpf.setText("");
            jFTCpf.setText(cpf);
        }


        //impede que o usuário digite mais digitos que o necessário
        if (jFTCpf.getText().length() > 11) {
            if (evt.getKeyCode() != 10) {
                validaCPF();
                jFTCpf.setText("");
                jFTCpf.setText(cpf);

            }

        }

    }//GEN-LAST:event_jFTCpfKeyReleased

    private void jCDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCDiaActionPerformed
       validaData();      
    }//GEN-LAST:event_jCDiaActionPerformed

    private void jCDiaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCDiaKeyPressed
        if (evt.getKeyCode() == 10) {
            jCMes.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jCSexo.requestFocus();
        }
    }//GEN-LAST:event_jCDiaKeyPressed

    private void jCMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCMesActionPerformed
        validaData();
    }//GEN-LAST:event_jCMesActionPerformed

    private void jCMesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCMesKeyPressed
        if (evt.getKeyCode() == 10) {
            jCAno.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jCDia.requestFocus();
        }
    }//GEN-LAST:event_jCMesKeyPressed

    private void jCAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCAnoActionPerformed
        validaData();
    }//GEN-LAST:event_jCAnoActionPerformed

    private void jCAnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCAnoKeyPressed
        if (evt.getKeyCode() == 10) {
            jTRg.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jCMes.requestFocus();
        }
    }//GEN-LAST:event_jCAnoKeyPressed

    private void jFTelResKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelResKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jCEstado.requestFocus();
        }
        if (jFTelRes.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                tel = jFTelRes.getText();
                if (jFTelRes.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText("(" + tel);
                    }

                } else if (jFTelRes.getText().length() == 4 && !jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + ")");
                    }
                } else if (jFTelRes.getText().length() == 5 && jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel);
                    }
                } else if (jFTelRes.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + "-");
                    }
                }
                tel = jFTelRes.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }
        } else {
            jFTelRes.setText("");
            jFTelRes.setText(tel);
        }




        if (jFTelRes.getText().length() > 14 || jFTelRes.getText().length() > 0 && jFTelRes.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }

        }

        if (evt.getKeyCode() == 10) {
            jFTelCom.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jTObs.requestFocus();
            jTPacientes.setSelectedComponent(jPDados);
        }
    }//GEN-LAST:event_jFTelResKeyPressed

    private void jFTelResKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelResKeyReleased


        if (jFTelRes.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                tel = jFTelRes.getText();
                if (jFTelRes.getText().length() == 0) {
                    if (evt.getKeyCode() != 8 || evt.getKeyCode() != 10) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText("(" + tel);
                    }

                } else if (jFTelRes.getText().length() == 4 && !jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + ")");
                    }
                } else if (jFTelRes.getText().length() == 5 && jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel);
                    }
                } else if (jFTelRes.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + "-");
                    }
                }
                tel = jFTelRes.getText();
            } else {
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }
        } else {
            jFTelRes.setText("");
            jFTelRes.setText(tel);
        }




        if (jFTelRes.getText().length() > 14 || jFTelRes.getText().length() > 0 && jFTelRes.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }

        }

    }//GEN-LAST:event_jFTelResKeyReleased

    private void jFTelComKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelComKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jCEstado.requestFocus();
        }
        if (jFTelCom.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telCom = jFTelCom.getText();
                if (jFTelCom.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText("(" + telCom);
                    }

                } else if (jFTelCom.getText().length() == 4 && !jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + ")");
                    }
                } else if (jFTelCom.getText().length() == 5 && jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom);
                    }
                } else if (jFTelCom.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + "-");
                    }
                }
                telCom = jFTelCom.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }
        } else {
            jFTelCom.setText("");
            jFTelCom.setText(telCom);
        }




        if (jFTelCom.getText().length() > 14 || jFTelCom.getText().length() > 0 && jFTelCom.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }

        }

        if (evt.getKeyCode() == 10) {
            jFCel.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jFTelRes.requestFocus();
        }
    }//GEN-LAST:event_jFTelComKeyPressed

    private void jFTelComKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelComKeyReleased

        if (jFTelCom.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telCom = jFTelCom.getText();
                if (jFTelCom.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText("(" + telCom);
                    }

                } else if (jFTelCom.getText().length() == 4 && !jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + ")");
                    }
                } else if (jFTelCom.getText().length() == 5 && jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom);
                    }
                } else if (jFTelCom.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + "-");
                    }
                }
                telCom = jFTelCom.getText();
            } else {
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }
        } else {
            jFTelCom.setText("");
            jFTelCom.setText(telCom);
        }




        if (jFTelCom.getText().length() > 14 || jFTelCom.getText().length() > 0 && jFTelCom.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }

        }

    }//GEN-LAST:event_jFTelComKeyReleased

    private void jFIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFIdKeyPressed
        if (evt.getKeyCode() == 18) {
            jCEstado.requestFocus();
        }
        if (jFId.getText().length() < 20) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() == 10 || evt.getKeyCode() == 38 || evt.getKeyCode() == 16) {
                id = jFId.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFId.setText("");
                jFId.setText(id);
            }
        }

        if (jFId.getText().length() > 19) {
            if (evt.getKeyCode() != 10) {
                jFId.setText("");
                jFId.setText(id);
            }
        }


        if (evt.getKeyCode() == 10) {
            jFTelRec.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jFCel.requestFocus();
        }


    }//GEN-LAST:event_jFIdKeyPressed

    private void jFIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFIdKeyReleased

        if (jFId.getText().length() < 20) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() == 10 || evt.getKeyCode() == 38 || evt.getKeyCode() == 16) {
                id = jFId.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFId.setText("");
                jFId.setText(id);
            }
        }

        if (jFId.getText().length() > 19) {
            if (evt.getKeyCode() != 10) {
                jFId.setText("");
                jFId.setText(id);
            }
        }


    }//GEN-LAST:event_jFIdKeyReleased

    private void jFTelRecKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelRecKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jCEstado.requestFocus();
        }
        if (jFTelRec.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telRec = jFTelRec.getText();
                if (jFTelRec.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText("(" + telRec);
                    }

                } else if (jFTelRec.getText().length() == 4 && !jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + ")");
                    }
                } else if (jFTelRec.getText().length() == 5 && jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec);
                    }
                } else if (jFTelRec.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + "-");
                    }
                }
                telRec = jFTelRec.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }
        } else {
            jFTelRec.setText("");
            jFTelRec.setText(telRec);
        }




        if (jFTelRec.getText().length() > 14 || jFTelRec.getText().length() > 0 && jFTelRec.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }

        }

        if (evt.getKeyCode() == 10) {

            jTEmail.requestFocus();
        }

        if (evt.getKeyCode() == 38) {

            jFId.requestFocus();
        }


    }//GEN-LAST:event_jFTelRecKeyPressed

    private void jFTelRecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelRecKeyReleased

        if (jFTelRec.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telRec = jFTelRec.getText();
                if (jFTelRec.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText("(" + telRec);
                    }

                } else if (jFTelRec.getText().length() == 4 && !jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + ")");
                    }
                } else if (jFTelRec.getText().length() == 5 && jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec);
                    }
                } else if (jFTelRec.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + "-");
                    }
                }
                telRec = jFTelRec.getText();
            } else {
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }
        } else {
            jFTelRec.setText("");
            jFTelRec.setText(telRec);
        }




        if (jFTelRec.getText().length() > 14 || jFTelRec.getText().length() > 0 && jFTelRec.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }

        }

    }//GEN-LAST:event_jFTelRecKeyReleased

    private void jTEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTEmailKeyPressed
        if (evt.getKeyCode() == 10) {
            jCEstado.requestFocus();
        }

        if (jTEmail.getText().length() < 50) {
            email = jTEmail.getText();
        }


        if (jTEmail.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTEmail.setText("");
                jTEmail.setText(email);
            }

        }


        if (evt.getKeyCode() == 38) {

            jFTelRec.requestFocus();
        }
    }//GEN-LAST:event_jTEmailKeyPressed

    private void jTEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTEmailKeyReleased
        if (jTEmail.getText().length() < 50) {
            email = jTEmail.getText();
        }


        if (jTEmail.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTEmail.setText("");
                jTEmail.setText(email);
            }

        }
    }//GEN-LAST:event_jTEmailKeyReleased

    private void jFCelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFCelKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jCEstado.requestFocus();
        }
        if (jFCel.getText().length() <= 15) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cel = jFCel.getText();
                if (jFCel.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText("(" + cel);
                    }

                } else if (jFCel.getText().length() == 4 && !jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + ")");
                    }
                } else if (jFCel.getText().length() == 5 && jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel);
                    }
                } else if (jFCel.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + "-");
                    }
                }
                cel = jFCel.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFCel.setText("");
                jFCel.setText(cel);
            }
        } else {
            jFCel.setText("");
            jFCel.setText(cel);
        }




        if (jFCel.getText().length() > 15 || jFCel.getText().length() > 0 && jFCel.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFCel.setText("");
                jFCel.setText(cel);
            }

        }

        if (evt.getKeyCode() == 10) {
            jFId.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jFTelCom.requestFocus();
        }
    }//GEN-LAST:event_jFCelKeyPressed

    private void jFCelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFCelKeyReleased

        if (jFCel.getText().length() <= 15) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cel = jFCel.getText();
                if (jFCel.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText("(" + cel);
                    }

                } else if (jFCel.getText().length() == 4 && !jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + ")");
                    }
                } else if (jFCel.getText().length() == 5 && jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel);
                    }
                } else if (jFCel.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + "-");
                    }
                }
                cel = jFCel.getText();
            } else {
                jFCel.setText("");
                jFCel.setText(cel);
            }
        } else {
            jFCel.setText("");
            jFCel.setText(cel);
        }




        if (jFCel.getText().length() > 15 || jFCel.getText().length() > 0 && jFCel.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFCel.setText("");
                jFCel.setText(cel);
            }

        }

    }//GEN-LAST:event_jFCelKeyReleased

    private void jTRuaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRuaKeyPressed
        if (evt.getKeyCode() == 10) {
            jTBairro.requestFocus();
        }

        if (jTRua.getText().length() < 60) {
            rua = jTRua.getText();
        }


        if (jTRua.getText().length() > 59) {
            if (evt.getKeyCode() != 10) {
                jTRua.setText("");
                jTRua.setText(rua);
            }

        }

        if (evt.getKeyCode() == 38) {
            jFTCep.requestFocus();
        }
    }//GEN-LAST:event_jTRuaKeyPressed

    private void jTRuaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRuaKeyReleased
        if (jTRua.getText().length() < 60) {
            rua = jTRua.getText();
        }


        if (jTRua.getText().length() > 59) {
            if (evt.getKeyCode() != 10) {
                jTRua.setText("");
                jTRua.setText(rua);
            }

        }
    }//GEN-LAST:event_jTRuaKeyReleased

    private void jTNumeroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNumeroKeyPressed
        if (evt.getKeyCode() == 10) {
            jTComplemento.requestFocus();
        }

        if (jTNumero.getText().length() < 10) {
            numero = jTNumero.getText();
        }


        if (jTNumero.getText().length() > 9) {
            if (evt.getKeyCode() != 10) {
                jTNumero.setText("");
                jTNumero.setText(numero);
            }

        }



        if (evt.getKeyCode() == 38) {
            jTCidade.requestFocus();
        }
    }//GEN-LAST:event_jTNumeroKeyPressed

    private void jTNumeroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNumeroKeyReleased
        if (jTNumero.getText().length() < 10) {
            numero = jTNumero.getText();
        }


        if (jTNumero.getText().length() > 9) {
            if (evt.getKeyCode() != 10) {
                jTNumero.setText("");
                jTNumero.setText(numero);
            }

        }
    }//GEN-LAST:event_jTNumeroKeyReleased

    private void jTComplementoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComplementoKeyPressed
        if (evt.getKeyCode() == 10) {
            jTPais.requestFocus();
        }

        if (jTComplemento.getText().length() < 10) {
            compl = jTComplemento.getText();
        }


        if (jTComplemento.getText().length() > 9) {
            if (evt.getKeyCode() != 10) {
                jTComplemento.setText("");
                jTComplemento.setText(compl);
            }

        }

        if (evt.getKeyCode() == 38) {
            jTNumero.requestFocus();
        }
    }//GEN-LAST:event_jTComplementoKeyPressed

    private void jTComplementoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTComplementoKeyReleased
        if (jTComplemento.getText().length() < 10) {
            compl = jTComplemento.getText();
        }


        if (jTComplemento.getText().length() > 9) {
            if (evt.getKeyCode() != 10) {
                jTComplemento.setText("");
                jTComplemento.setText(compl);
            }

        }
    }//GEN-LAST:event_jTComplementoKeyReleased

    private void jTBairroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTBairroKeyPressed
        if (evt.getKeyCode() == 10) {
            jTCidade.requestFocus();
        }

        if (jTBairro.getText().length() < 50) {
            bairro = jTBairro.getText();
        }


        if (jTBairro.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTBairro.setText("");
                jTBairro.setText(bairro);
            }

        }

        if (evt.getKeyCode() == 38) {
            //upperCase();
            jTRua.requestFocus();
        }
    }//GEN-LAST:event_jTBairroKeyPressed

    private void jTBairroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTBairroKeyReleased


        if (jTBairro.getText().length() < 50) {
            bairro = jTBairro.getText();
        }


        if (jTBairro.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTBairro.setText("");
                jTBairro.setText(bairro);
            }

        }

    }//GEN-LAST:event_jTBairroKeyReleased

    private void jTCidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCidadeKeyPressed
        if (evt.getKeyCode() == 10) {
            jTNumero.requestFocus();
        }

        if (jTCidade.getText().length() < 50) {
            cidade = jTCidade.getText();
        }


        if (jTCidade.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTCidade.setText("");
                jTCidade.setText(cidade);
            }

        }

        if (evt.getKeyCode() == 38) {
            jTBairro.requestFocus();
        }
    }//GEN-LAST:event_jTCidadeKeyPressed

    private void jTCidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCidadeKeyReleased


        if (jTCidade.getText().length() < 50) {
            cidade = jTCidade.getText();
        }


        if (jTCidade.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTCidade.setText("");
                jTCidade.setText(cidade);
            }

        }

    }//GEN-LAST:event_jTCidadeKeyReleased

    private void jCEstadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCEstadoKeyPressed
        if (evt.getKeyCode() == 10) {
            jFTCep.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jTEmail.requestFocus();
        }
    }//GEN-LAST:event_jCEstadoKeyPressed

    private void jTPaisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPaisKeyPressed

        if (jTPais.getText().length() < 50) {
            pais = jTPais.getText();
        }


        if (jTPais.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTPais.setText("");
                jTPais.setText(pais);
            }

        }

        if (evt.getKeyCode() == 38) {
            jTComplemento.requestFocus();
        }
    }//GEN-LAST:event_jTPaisKeyPressed

    private void jTPaisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPaisKeyReleased
        if (jTPais.getText().length() < 50) {
            pais = jTPais.getText();
        }


        if (jTPais.getText().length() > 49) {
            if (evt.getKeyCode() != 10) {
                jTPais.setText("");
                jTPais.setText(pais);
            }

        }

    }//GEN-LAST:event_jTPaisKeyReleased

    private void jFTCepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTCepKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTRua.requestFocus();
        }

        if (jFTCep.getText().length() <= 9) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() == 10 || evt.getKeyCode() == 38) {
                //cpf = jFTCep.getText();

                if (jFTCep.getText().length() == 5) {
                    if (evt.getKeyCode() != 8) {
                        cep = jFTCep.getText();
                        jFTCep.setText(cep + "-");
                    }
                } else {
                    cep = jFTCep.getText();
                }


            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTCep.setText("");
                jFTCep.setText(cep);
            }
        }
        
      

        if (jFTCep.getText().length() > 9) {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTCep.setText("");
                jFTCep.setText(cep);
            }

        }


        if (evt.getKeyCode() == 10) {
            jTRua.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jCEstado.requestFocus();
        }
    }//GEN-LAST:event_jFTCepKeyPressed

    private void jFTCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTCepKeyReleased


        if (jFTCep.getText().length() <= 9) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() == 10 || evt.getKeyCode() == 38) {
                //cpf = jFTCep.getText();

                if (jFTCep.getText().length() == 5) {
                    if (evt.getKeyCode() != 8) {
                        cep = jFTCep.getText();
                        jFTCep.setText(cep + "-");
                    }
                } else {
                    cep = jFTCep.getText();
                }


            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTCep.setText("");
                jFTCep.setText(cep);
            }
        }

        
          if(jFTCep.getText().length()==9){
             
           preencheEnd();
        }

        
        if (jFTCep.getText().length() > 9) {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTCep.setText("");
                jFTCep.setText(cep);
            }

        }



    }//GEN-LAST:event_jFTCepKeyReleased

    private void jTDadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDadosMouseClicked
        linhaSelecionadaPaciente(jTDados);
    }//GEN-LAST:event_jTDadosMouseClicked

    private void jCPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCPesquisaActionPerformed
        try {
            listarPacientes();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Problema ao escolher tipo de pesquisa.\n"+ex);
        }
    }//GEN-LAST:event_jCPesquisaActionPerformed

    private void jBPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisarActionPerformed
        try {
            listarPacientes();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Problemas no botão de pesquisa.\n " + ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Nenhhum paciente encontrado.\n" + e);
        }

        if (msg == false) {
            JOptionPane.showMessageDialog(null, "Nenhum paciente encontrado.", "Pesquisa", JOptionPane.INFORMATION_MESSAGE);
        }
        jTPesquisar.requestFocus();
    }//GEN-LAST:event_jBPesquisarActionPerformed

    private void jTPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPesquisarKeyReleased
        if (evt.getKeyCode() >= 60 && evt.getKeyCode() <= 90 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40
                || evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                || evt.getKeyCode() == 8 || evt.getKeyCode() == 10) {
            try {
                listarPacientes();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Problemas no campo de pesquisa.\n" + ex);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Nenhhum paciente encontrado.\n" + e);
            }
            jTPesquisar.requestFocus();
        }
    }//GEN-LAST:event_jTPesquisarKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      sair();
    }//GEN-LAST:event_formWindowClosing

    private void jBPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisaActionPerformed
    jTPacientes.setSelectedComponent(jPPesquisa);      
    }//GEN-LAST:event_jBPesquisaActionPerformed

    private void jBProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximoActionPerformed
          jTPacientes.setSelectedComponent(jPEnd);
    }//GEN-LAST:event_jBProximoActionPerformed

    private void jBProximo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximo2ActionPerformed
        jTPacientes.setSelectedComponent(jPConsultas);
    }//GEN-LAST:event_jBProximo2ActionPerformed

    private void jBAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnteriorActionPerformed
       jTPacientes.setSelectedComponent(jPDados);
    }//GEN-LAST:event_jBAnteriorActionPerformed

    private void jBProximo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximo3ActionPerformed
         jTPacientes.setSelectedComponent(jPPesquisa);
    }//GEN-LAST:event_jBProximo3ActionPerformed

    private void jBAnterior2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnterior2ActionPerformed
         jTPacientes.setSelectedComponent(jPEnd);
    }//GEN-LAST:event_jBAnterior2ActionPerformed

    private void jBVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVoltarActionPerformed
        jTPacientes.setSelectedComponent(jPDados);
    }//GEN-LAST:event_jBVoltarActionPerformed

    private void jCEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCEstadoActionPerformed
        preencheEnd();
    }//GEN-LAST:event_jCEstadoActionPerformed

    //Salva os dados no banco de dados
     public void cadastrarPaciente() throws SQLException{
        String data="";
        //Verifica se todos os dados obrigatórios foram preenchidos
            if(verificaDados()){
  
         String sql = "select *from paciente";
         PreparedStatement stmt = this.conexao.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery();
         boolean igual=false;
        
         //Verifica se o nome ou cpf usado já está cadastrado no sistema
         while(rs.next()){
             if(jTNome.getText().equals(rs.getString("nome_paciente"))||
                     jFTCpf.getText().equals(rs.getString("cpf_paciente"))){
                 igual=true; 
             }
         }
         
         rs.close();
         stmt.close();
        
         //Seta os dados digitados
         if(igual==false){
              try {
            atributos user = new atributos();
            user.setNomePaciente(jTNome.getText());
            user.setSexoPaciente(jCSexo.getSelectedItem().toString());
            user.setDiaPaciente(jCDia.getSelectedItem().toString());
            user.setMesPaciente(jCMes.getSelectedItem().toString());
            user.setAnoPaciente(jCAno.getSelectedItem().toString());
                data = jCDia.getSelectedItem().toString();
       data = data+"/"+jCMes.getSelectedItem().toString();
        data = data+"/"+jCAno.getSelectedItem();toString();
            user.setDtNascPaciente(data);
            user.setRgPaciente(jTRg.getText());
            user.setCpfPaciente(jFTCpf.getText());
            user.setNacPaciente(jTNacionalidade.getText());
            user.setProfissaoPaciente(jTProfissao.getText());
            user.setEstCivilPaciente(jCEstadoCivil.getSelectedItem().toString());
            user.setConjuguePaciente(jTConjugue.getText());
            user.setRespPaciente(jTResponsavel.getText());
            user.setRgRespPaciente(jTRgResp.getText());
            user.setDescricaoConvenio(jCConvenio.getSelectedItem().toString());
            user.setMotivoPaciente(jTMotivo.getText());
            user.setObsPaciente(jTObs.getText());
            user.setTelResPaciente(jFTelRes.getText());
            user.setTelComPaciente(jFTelCom.getText());
            user.setCelPaciente(jFCel.getText());
            user.setIdPaciente(jFId.getText());
            user.setTelRecPaciente(jFTelRec.getText());
            user.setEmailPaciente(jTEmail.getText());
            user.setRuaPaciente(jTRua.getText());
            user.setNumeroPaciente(jTNumero.getText());
            user.setComplPaciente(jTComplemento.getText());
            user.setCepPaciente(jFTCep.getText());
            user.setBairroPaciente(jTBairro.getText());
            user.setCidadePaciente(jTCidade.getText());
            user.setUfPaciente(jCEstado.getSelectedItem().toString());
            user.setPaisPaciente(jTPais.getText());
            
            //Objeto da classe pacienteDao para chamar método de salvar os dados
            pacienteDao dao = new pacienteDao();
            dao.cadastroPaciente(user);
            desabilitaDados();//desabilita a edição de campos após salvar
            listarPacientes();//Atualiza a tabela de pesquisa automaticamente
            limparDados();
            JOptionPane.showMessageDialog(null, "Paciente cadastrado com sucesso.","Cadastro",JOptionPane.INFORMATION_MESSAGE); 
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Erro com o banco de dados.\n"+ex,"Erro",JOptionPane.ERROR_MESSAGE);
        }   
         }else{
            JOptionPane.showMessageDialog(this, "Este nome ou CPF já está cadastrado no sistema.","Atenção",JOptionPane.WARNING_MESSAGE);
             jLObrNome.setForeground(Color.red);
                 jLObrCpf.setForeground(Color.red);
         }
            }else{
                //Mostra os componentes obrigatórios que não foram preenchidos
                camposBranco(); 
            } 
        }
    
    //Método que mostra os campos obrigatórios não preenchidos e marca seus labels como vermelhos
    public void camposBranco(){
        if(jTPais.getText().equals("")){
                    jLObrPais.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jTPais.requestFocus();
                }else{
             jLObrPais.setForeground(Color.black);
        }
                
                if(jTCidade.getText().equals("")){
                    jLObrCidade.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jTCidade.requestFocus();
                }else{
                    jLObrCidade.setForeground(Color.black);
                }
                
                if(jTBairro.getText().equals("")){
                    jLObrBairro.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jTBairro.requestFocus();
                }else{
                     jLObrBairro.setForeground(Color.black);
                }
                
                if(jTNumero.getText().equals("")){
                    jLObrNum.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jTNumero.requestFocus();
                }else{
                    jLObrNum.setForeground(Color.black);
                }
                
                if(jTRua.getText().equals("")){
                    jLObrRua.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jTRua.requestFocus();
                }else{
                    jLObrRua.setForeground(Color.black);
                }
                
                if(jFTCep.getText().length()!=9){
                    jLObrCep.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jFTCep.requestFocus();
                }else{
                     jLObrCep.setForeground(Color.black);
                }
                
                if(jFTelRes.getText().length()!=14 && jFTelCom.getText().length()!=14 &&
                        jFCel.getText().length()!=14 && jFId.getText().equals("")&&
                        jFTelRec.getText().length()!=14 && jTEmail.getText().equals("")){
                    jLObrContato.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPEnd);
                    jFTelRes.requestFocus();
                }else{
                     jLObrContato.setForeground(Color.black);
                }
                
                 if(jTRgResp.isEditable() && jTRgResp.getText().equals("")){
                    jLRgResp.setForeground(Color.red);
                     jTPacientes.setSelectedComponent(jPDados);
                    jTRgResp.requestFocus();
                }else{
                    jLRgResp.setForeground(Color.black);
                }
                
                if(jTResponsavel.isEditable() && jTResponsavel.getText().equals("")){
                    jLResponsavel.setForeground(Color.red);
                     jTPacientes.setSelectedComponent(jPDados);
                    jTResponsavel.requestFocus();
                }else{
                    jLResponsavel.setForeground(Color.black);
                }
                
                if(jTRgResp.isEditable() && jTRgResp.getText().equals("")){
                    jLRgResp.setForeground(Color.red);
                     jTPacientes.setSelectedComponent(jPDados);
                    jTRgResp.requestFocus();
                }else{
                    jLRgResp.setForeground(Color.black);
                }
             
                
                if(jTConjugue.isEditable() && jTConjugue.getText().equals("")){
                    jLConjugue.setForeground(Color.red);
                     jTPacientes.setSelectedComponent(jPDados);
                    jTConjugue.requestFocus();
                }else{
                    jLConjugue.setForeground(Color.black);
                }
                
                if(jTProfissao.getText().equals("")){
                    jLObrProfissao.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPDados);
                    jTProfissao.requestFocus();
                }else{
                     jLObrProfissao.setForeground(Color.black);
                }
                
                if(jTNacionalidade.getText().equals("")){
                    jLObrNac.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPDados);
                    jTNacionalidade.requestFocus();
                }else{
                    jLObrNac.setForeground(Color.black);
                }
                
                if(jFTCpf.getText().length()!=11 ||  jFTCpf.getText().length()==11 && jLValidacao.getText().equals("CPF Inválido") ){
                    jLObrCpf.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPDados);
                    jFTCpf.requestFocus();
                }else{
                      jLObrCpf.setForeground(Color.black);
                }
                
                if(jTRg.getText().equals("")){
                    jLObrRg.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPDados);
                    jTRg.requestFocus();
                }else{
                    jLObrRg.setForeground(Color.black);
                }
                
                if(jCDia.getSelectedIndex()==0 || jCMes.getSelectedIndex()==0 || jCAno.getSelectedIndex()==0
                        || jLDtInvalida.getText().equals("Data inválida")){
                    jLObrDtNasc.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPDados);
                    jCDia.requestFocus();
                }else{
                     jLObrDtNasc.setForeground(Color.black);
                }
                
                if(jTNome.getText().equals("")){
                    jLObrNome.setForeground(Color.red);
                    jTPacientes.setSelectedComponent(jPDados);
                    jTNome.requestFocus();
                }else{
                    jLObrNome.setForeground(Color.black);
                }
                
    }
    
    
     private void alteraPaciente() throws SQLException {
         String data="";
        if(jTDados.getSelectedRow() != -1){// Se a linha selecionada na tabela for diferente de 1, ou seja,
            //se houver algum paciente cadastrado, o usuário receberá a mensagem de confirmação
            UIManager.put("OptionPane.noButtonText", "Não");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
            int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar este paciente?", "Confirmação", 0,3);
         if (resp == 0){
             
            
             
              if(verificaDados()){
                   jLObrNome.setForeground(Color.BLACK);
                jLObrDtNasc.setForeground(Color.BLACK);
                jLObrRg.setForeground(Color.BLACK);
                jLObrCpf.setForeground(Color.BLACK);
                jLObrNac.setForeground(Color.BLACK);
                jLObrProfissao.setForeground(Color.BLACK);
                jLObrContato.setForeground(Color.BLACK);
                jLObrCep.setForeground(Color.BLACK);
                jLObrRua.setForeground(Color.BLACK);
                jLObrNum.setForeground(Color.BLACK);
                jLObrBairro.setForeground(Color.BLACK);
                jLObrCidade.setForeground(Color.BLACK);
                jLObrPais.setForeground(Color.BLACK);
                 jLConjugue.setForeground(Color.BLACK);
                jLResponsavel.setForeground(Color.BLACK);
                jLRgResp.setForeground(Color.BLACK);
                
                 String sql = "select *from paciente";
         PreparedStatement stmt = this.conexao.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery();
         boolean nome_igual=false;
         boolean cpf_igual=false;
        
         
          //Se o usuário tentar alterar o nome ou o cpf para algum já cadastrado o programa irá impedir
         if(!jTNome.getText().equals(nomeigual)){
             while(rs.next()){
             if(jTNome.getText().equals(rs.getString("nome_paciente"))){
                 nome_igual=true; 
             }
         }
         }
         
         if(!jFTCpf.getText().equals(cpfigual)){
              while(rs.next()){
                  if(jFTCpf.getText().equals(rs.getString("cpf_paciente"))){
                 cpf_igual=true;
             }
              }
         }
         
         rs.close();
         stmt.close();
        
         if(nome_igual==false && cpf_igual==false){
             atributos at = new atributos();
                pacienteDao dao =  new pacienteDao();
                at.setCodigoPaciente(Long.valueOf(jTCodigo.getText()));
                at.setNomePaciente(jTNome.getText());
                at.setSexoPaciente(jCSexo.getSelectedItem().toString());
                at.setDiaPaciente(jCDia.getSelectedItem().toString());
                at.setMesPaciente(jCMes.getSelectedItem().toString());
               at.setAnoPaciente(jCAno.getSelectedItem().toString());
               data = jCDia.getSelectedItem().toString();
        data = data+"/"+jCMes.getSelectedItem().toString();
        data = data+"/"+jCAno.getSelectedItem();toString();
            at.setDtNascPaciente(data);
                at.setRgPaciente(jTRg.getText());
                at.setCpfPaciente((jFTCpf.getText()));
                at.setNacPaciente((jTNacionalidade.getText()));
                at.setProfissaoPaciente((jTProfissao.getText()));
                at.setEstCivilPaciente(jCEstadoCivil.getSelectedItem().toString());
                at.setConjuguePaciente((jTConjugue.getText()));
                at.setRespPaciente((jTResponsavel.getText()));
                at.setRgRespPaciente((jTRgResp.getText()));
                at.setConvenioPaciente(jCConvenio.getSelectedItem().toString());
                at.setMotivoPaciente(jTMotivo.getText());
                at.setObsPaciente(jTObs.getText());
                at.setTelResPaciente(jFTelRes.getText());
                at.setTelComPaciente(jFTelCom.getText());
                at.setCelPaciente(jFCel.getText());
                at.setIdPaciente(jFId.getText());
                at.setTelRecPaciente(jFTelRec.getText());
                at.setEmailPaciente(jTEmail.getText());
                at.setRuaPaciente(jTRua.getText());
                at.setNumeroPaciente(jTNumero.getText());
                at.setComplPaciente(jTComplemento.getText());
                at.setCepPaciente(jFTCep.getText());
                at.setBairroPaciente(jTBairro.getText());
                at.setCidadePaciente(jTCidade.getText());
                at.setUfPaciente(jCEstado.getSelectedItem().toString());
                at.setPaisPaciente(jTPais.getText());
               
                
               
                dao.alteraPaciente(at);
                 JOptionPane.showMessageDialog(null,"Paciente alterado com sucesso.","Alterar",JOptionPane.INFORMATION_MESSAGE);
                  listarPacientes();
                 desabilitaDados();
                 limparDados();
         }else{
             JOptionPane.showMessageDialog(this, "Este nome ou CPF já está cadastrado no sistema.","Atenção",JOptionPane.WARNING_MESSAGE);
             jLObrNome.setForeground(Color.red);
                 jLObrCpf.setForeground(Color.red);
         }
                
            }else{
                  camposBranco();
              }
        }
         }
           
         }
     
     public void excluirPaciente() throws SQLException{
         UIManager.put("OptionPane.noButtonText", "Não");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
        int resp = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir este paciente?", "Confirmação", 0,3);
         if (resp == 0){
                pacienteDao dao;
                dao = new pacienteDao();
                //Exclui do banco de dados o paciente selecionado na tabela
                dao.excluirPaciente(pacientes.get(jTDados.getSelectedRow()));
                //Automaticamente realiza pesquisa e mostra na tabela
                mostraPesquisaPaciente(pacientes);
                JOptionPane.showMessageDialog(null,"Paciente excluído com sucesso.","Excluir",JOptionPane.INFORMATION_MESSAGE);
                
               limparDados();
                listarPacientes();
            desabilitaDados();
             jTPacientes.setSelectedComponent(jPDados);
         }
        }
     
     //Preenche o combo box de convênios com os convênios salvos no banco de dados
     public void preencheConvenio(){
         try{
              String sql = "select *from convenio";
         PreparedStatement stmt = this.conexao.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery();
         
         while(rs.next()){
             jCConvenio.addItem(rs.getString("ds_convenio"));
         }
         
         }catch(SQLException ex){
             JOptionPane.showMessageDialog(null,"Erro ao preencher os convênios.\nErro: "+ex);
         }
         
     }
     
     //Caso o paciente seja casado, libera e torna obrigatório o preenchimento do nome do conjugue
     public void verificaEstadoCivil(){
        if(jCEstadoCivil.getSelectedIndex()==1){
          jTConjugue.setEditable(true);
          jTResponsavel.setText("");
          jTRgResp.setText("");
          jLResponsavel.setForeground(Color.black);
          jLRgResp.setForeground(Color.black);
      }else{
          jTConjugue.setEditable(false);
          jLConjugue.setForeground(Color.black);
          jTConjugue.setText("");
      }
    }
     
      public void impressaoPaciente() {
	 
	    // note que estamos chamando o novo relatório
	    InputStream inputStream = getClass().getResourceAsStream( "/Pacientes.jasper" );
	 
	    // mapa de parâmetros do relatório
	    Map parametros = new HashMap();
	 
	    /*
	     * Insere o parâmetro primeiroNome no mapa, com o valor F%
	     * ou seja, todos os clientes que tenham primeiro nome começando
	     * com a letra F.
	     */
	    parametros.put( "codigoPaciente", jTCodigo.getText() );
	 
	    // outros possíveis parâmetros aqui...
	 
	    try {
	 
	        // abre o relatório
	        Impressao.openReport( "Pacientes", inputStream, parametros,
	                ConexaoImpressao.getMindConnection() );
                
	  this.dispose();
	    } catch ( SQLException exc ) {
	        exc.printStackTrace();
	    } catch ( JRException exc ) {
	        exc.printStackTrace();
	    }
	 
	}
     
     //Método para saber se o paciente é maior de idade
     public void verificaIdade(){
    
         //Verifica se alguma data de nascimento foi selecionada
         if(jCDia.getSelectedIndex()!=0 && jCMes.getSelectedIndex()!=0 && jCAno.getSelectedIndex()!=0)
         {
              DateFormat year = new SimpleDateFormat("yyyy");//formato de data para ano
      Date date = new Date();
      String anoSistema = year.format(date);//Variável que recebe o ano atual do sistema
      
      DateFormat day = new SimpleDateFormat("dd");//formato de data para dia
      Date date2 = new Date();
      String diaSistema = day.format(date2);//variável que recebe o dia atual do sistema
      
             int ano = Integer.valueOf(jCAno.getSelectedItem().toString());//Variável recebe o ano de nascimento
             int mes = date.getMonth()+1;//Variável que recebe o mês atual do sistema
             int dia = Integer.valueOf(jCDia.getSelectedItem().toString());//Variável que recebe o dia de nascimento
             
             if((Integer.valueOf(anoSistema)-ano)>18 || jCEstadoCivil.getSelectedIndex()==1)
             {//Verifica se é maior de 18 anos 
                   jTResponsavel.setEditable(false);
            jTRgResp.setEditable(false);
            jLResponsavel.setForeground(Color.black);
            jLRgResp.setForeground(Color.black);
            jTResponsavel.setText("");
            jTRgResp.setText("");
             }else if(Integer.valueOf(anoSistema)-ano==18)
             {
                 if(jCMes.getSelectedIndex()<mes){//Se a subtração do ano do sistema pelo ano de nascimento for igual a 18, verifica o mês de nascimento
                        jTResponsavel.setEditable(false);
            jTRgResp.setEditable(false);
            jLResponsavel.setForeground(Color.black);
            jLRgResp.setForeground(Color.black);
                 }else if(jCMes.getSelectedIndex()==mes){
                     if(dia<=Integer.valueOf(diaSistema)){//Se o paciente completa 18 anos no mês atual, verifica o dia do nascimento
                          jTResponsavel.setEditable(false);
            jTRgResp.setEditable(false);
            jTResponsavel.setForeground(Color.black);
            jTRgResp.setForeground(Color.black);
                     }else{
                         jTResponsavel.setEditable(true);//Libera para edição e torna obrigatório o preenchimento do nome do Responsável
            jTRgResp.setEditable(true);//Libera o campo RG do responsável
          
                     }
                 }else{
                     jTResponsavel.setEditable(true);//Libera para edição e torna obrigatório o preenchimento do nome do Responsável
            jTRgResp.setEditable(true);//Libera o campo RG do responsável
                 if(jTResponsavel.getText().equals("") && jTRgResp.getText().equals("")){
             //jLResponsavel.setForeground(Color.red);
           // jLRgResp.setForeground(Color.red);
            }    
                       
                     
                 }
               
             }else{
                 jTResponsavel.setEditable(true);//Libera para edição e torna obrigatório o preenchimento do nome do Responsável
            jTRgResp.setEditable(true);//Libera o campo RG do responsável
             
                   
             }
         }     
     }
     
      public void limparDados(){
            jTCodigo.setText("");
            jTNome.setText("");
            jCSexo.setSelectedIndex(0);
            jCDia.setSelectedIndex(0);
            jCMes.setSelectedIndex(0);
            jCAno.setSelectedIndex(0);
            jTRg.setText("");
            jFTCpf.setText("");
            jLValidacao.setVisible(false);
            jTNacionalidade.setText("");
            jTProfissao.setText("");
            jCEstadoCivil.setSelectedIndex(0);
            jTConjugue.setText("");
            jTResponsavel.setText("");
            jTRgResp.setText("");
           jCConvenio.setSelectedIndex(0);
            jTMotivo.setText("");
            jTObs.setText("");
            jFTelRes.setText("");
            jFTelCom.setText("");
            jFCel.setText("");
            jFId.setText("");
            jFTelRec.setText("");
            jTEmail.setText("");
            jTRua.setText("");
            jTNumero.setText("");
            jTComplemento.setText("");
            jFTCep.setText("");
            jTBairro.setText("");
            jTCidade.setText("");
            jCEstado.setSelectedIndex(0);
            jTPais.setText("");
            nome = "";
            obs = "";
            motivo ="";
            cpf="";
            nac="";
       profissao="";
       conjugue="";
       responsavel="";
       rgresp ="";
       tel ="";
       telCom="";
       cel ="";
       id = "";
       telRec="";
        rua="";
       numero="";
       bairro="";
       cidade="";
       compl="";
       cidade="";
       pais="";
       cep = "";
        jLObrNome.setForeground(Color.BLACK);
                jLObrDtNasc.setForeground(Color.BLACK);
                jLObrRg.setForeground(Color.BLACK);
                jLObrCpf.setForeground(Color.BLACK);
                jLObrNac.setForeground(Color.BLACK);
                jLObrProfissao.setForeground(Color.BLACK);
                jLObrContato.setForeground(Color.BLACK);
                jLObrCep.setForeground(Color.BLACK);
                jLObrRua.setForeground(Color.BLACK);
                jLObrNum.setForeground(Color.BLACK);
                jLObrBairro.setForeground(Color.BLACK);
                jLObrCidade.setForeground(Color.BLACK);
                jLObrPais.setForeground(Color.BLACK);
                jLConjugue.setForeground(Color.BLACK);
                jLResponsavel.setForeground(Color.BLACK);
                jLRgResp.setForeground(Color.BLACK);
        }
      
     boolean msg = true;
     
     private void mostraPesquisaPaciente(List<atributos> pacientes) {
      //Enquanto houver dados na tabela, ele remove a linha zero para evitar bugs
         while(tmPacientes.getRowCount()>0){
          tmPacientes.removeRow(0);
      }
       //Se a tabela for vazia, variável guarda valor para mostrar mensagem ao pressionar o botão Pesquisar
        if(pacientes.isEmpty()){
            msg = false;
      }else{
          //Se encontrar dados, um vetor guardará os valores de cada coluna e apresentál-los
            msg = true;
          String []linha = new String [] {null, null, null, null};
          for (int i = 0; i < pacientes.size(); i++){
              tmPacientes.addRow(linha);
              tmPacientes.setValueAt(pacientes.get(i).getCodigoPaciente(), i, 0);
              tmPacientes.setValueAt(pacientes.get(i).getNomePaciente(), i, 1);
              tmPacientes.setValueAt(pacientes.get(i).getRgPaciente(), i, 2);
              tmPacientes.setValueAt(pacientes.get(i).getCpfPaciente(), i, 3);
          }
      }
    }
     
   
     
     public void habilitaDados(){
            jTNome.setEditable(true);
            jCSexo.setEnabled(true);
           jCDia.setEnabled(true);
            jCMes.setEnabled(true);
            jCAno.setEnabled(true);
            jTRg.setEditable(true);
            jFTCpf.setEditable(true);
            jTNacionalidade.setEditable(true);
            jCEstadoCivil.setEnabled(true);
            jTProfissao.setEditable(true);
            jCConvenio.setEnabled(true);
            jTMotivo.setEnabled(true);
            jTObs.setEnabled(true);
            jFTelRes.setEditable(true);
            jFTelCom.setEditable(true);
            jFCel.setEditable(true);
            jFId.setEditable(true);
            jFTelRec.setEditable(true);
            jTEmail.setEditable(true);
            jTRua.setEditable(true);
            jTNumero.setEditable(true);
            jTComplemento.setEditable(true);
            jFTCep.setEditable(true);
            jTBairro.setEditable(true);
            jTCidade.setEditable(true);
            jCEstado.setEnabled(true);
            jTPais.setEditable(true);
            jBSalvar.setEnabled(true);
           jBCancelar.setEnabled(true);
           jBNovo.setEnabled(false);
        }
    
    
     public void desabilitaDados(){
            jTNome.setEditable(false);
            jCSexo.setEnabled(false);
            jCDia.setEnabled(false);
            jCMes.setEnabled(false);
            jCAno.setEnabled(false);
            jTRg.setEditable(false);
            jFTCpf.setEditable(false);
            jTNacionalidade.setEditable(false);
            jCEstadoCivil.setEnabled(false);
            jTConjugue.setEditable(false);
            jTProfissao.setEditable(false);
             jTResponsavel.setEditable(false);
            jTRgResp.setEditable(false);
            jTMotivo.setEnabled(false);
            jCConvenio.setEnabled(false);
            jTObs.setEnabled(false);
            jFTelRes.setEditable(false);
            jFTelCom.setEditable(false);
            jFCel.setEditable(false);
            jFId.setEditable(false);
            jFTelRec.setEditable(false);
            jTEmail.setEditable(false);
            jTRua.setEditable(false);
            jTNumero.setEditable(false);
            jTComplemento.setEditable(false);
            jFTCep.setEditable(false);
            jTBairro.setEditable(false);
            jTCidade.setEditable(false);
            jCEstado.setEnabled(false);
            jTPais.setEditable(false);
            jBSalvar.setEnabled(false);
            jBExcluir.setEnabled(false);
            jBCancelar.setEnabled(false);
           jBImprimir.setEnabled(false);
           jBAlterar.setEnabled(false);
           jBNovo.setEnabled(true);
        }
    
     //Método que verifica se todos os dados obgrigatórios estão preenchidos
    public boolean verificaDados(){
        if(jTNome.getText().equals("") || jCDia.getSelectedIndex()==0 ||
                jCMes.getSelectedIndex()==0 || jCAno.getSelectedIndex()==0 || 
                jLDtInvalida.getText().equals("Data inválida") || jTRg.getText().equals("") || jFTCpf.getText().length()!=11 || 
                jFTCpf.getText().length()==11 && jLValidacao.getText().equals("CPF Inválido") || jTNacionalidade.getText().equals("") || 
                jTProfissao.getText().equals("") || jTConjugue.isEditable() && jTConjugue.getText().equals("")|| jTResponsavel.isEditable() && jTResponsavel.getText().equals("") 
                || jTRgResp.isEditable() && jTRgResp.getText().equals("") || jFTelRes.getText().length()!=14 
                && jFTelCom.getText().length()!=14  && jFCel.getText().length()<14  && jFId.getText().equals("") && jFTelRec.getText().length()!=14
                && jTEmail.getText().equals("")|| jTRua.getText().equals("") || jTNumero.getText().equals("") || jFTCep.getText().length()!=9 ||
                jTBairro.getText().equals("") || jTCidade.getText().equals("") || jTPais.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Há campos obrigatórios não preenchidos.","Erro", JOptionPane.WARNING_MESSAGE);
        return false;
        }else{
               jLObrNome.setForeground(Color.BLACK);
                jLObrDtNasc.setForeground(Color.BLACK);
                jLObrRg.setForeground(Color.BLACK);
                jLObrCpf.setForeground(Color.BLACK);
                jLObrNac.setForeground(Color.BLACK);
                jLObrProfissao.setForeground(Color.BLACK);
                jLObrContato.setForeground(Color.BLACK);
                jLObrCep.setForeground(Color.BLACK);
                jLObrRua.setForeground(Color.BLACK);
                jLObrNum.setForeground(Color.BLACK);
                jLObrBairro.setForeground(Color.BLACK);
                jLObrCidade.setForeground(Color.BLACK);
                jLObrPais.setForeground(Color.BLACK);
                 jLConjugue.setForeground(Color.BLACK);
                jLResponsavel.setForeground(Color.BLACK);
                jLRgResp.setForeground(Color.BLACK);
            return true;
        }
        
    }
    
    //Escolhe o tipo de pesquisa de acordo com o que foi escolhido na Combo Box
    protected void listarPacientes() throws SQLException{
        pacienteDao dao = new pacienteDao ();
        
        switch(jCPesquisa.getSelectedIndex()){
            case 0:
                 pacientes = dao.getListaNomePaciente("%" + jTPesquisar.getText() + "%");
        mostraPesquisaPaciente(pacientes);
                break;
              
            case 1:
                pacientes = dao.getListaCodigoPaciente(jTPesquisar.getText());
        mostraPesquisaPaciente(pacientes);
                break;
      
            case 2:
                 pacientes = dao.getListaRGPaciente("%" + jTPesquisar.getText() + "%");
        mostraPesquisaPaciente(pacientes);
                break;    
            case 3:
                pacientes = dao.getListaCPFPaciente("%" + jTPesquisar.getText() + "%");
                mostraPesquisaPaciente(pacientes);
                 break;
           
        }
    }
        
  
        String nomeigual="",cpfigual="";
        
        
        //Passa os dados pesquisados na tabela para os Text Fields e Combo Box
        private void linhaSelecionadaPaciente(JTable tabela){
          
        if(jTDados.getSelectedRow()!=-1){
            habilitaDados();
            jBSalvar.setEnabled(false);
            jBAlterar.setEnabled(true);
            jBImprimir.setEnabled(true);
            jBExcluir.setEnabled(true);
        jTCodigo.setText(String.valueOf(pacientes.get(tabela.getSelectedRow()).getCodigoPaciente()));
        jTNome.setText(pacientes.get(tabela.getSelectedRow()).getNomePaciente());
        jCSexo.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getSexoPaciente());
        jCDia.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getDiaPaciente());
        jCMes.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getMesPaciente());
        jCAno.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getAnoPaciente());
        jTRg.setText(pacientes.get(tabela.getSelectedRow()).getRgPaciente());
        jFTCpf.setText(pacientes.get(tabela.getSelectedRow()).getCpfPaciente());
        jTNacionalidade.setText(pacientes.get(tabela.getSelectedRow()).getNacPaciente());
        jTProfissao.setText(pacientes.get(tabela.getSelectedRow()).getProfissaoPaciente());
        jCEstadoCivil.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getEstCivilPaciente());
        jTConjugue.setText(pacientes.get(tabela.getSelectedRow()).getConjuguePaciente());
        jTResponsavel.setText(pacientes.get(tabela.getSelectedRow()).getRespPaciente());
        jTRgResp.setText(pacientes.get(tabela.getSelectedRow()).getRgRespPaciente());
        jCConvenio.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getConvenioPaciente());
        jTMotivo.setText(pacientes.get(tabela.getSelectedRow()).getMotivoPaciente());
        jTObs.setText(pacientes.get(tabela.getSelectedRow()).getObsPaciente());
        jFTelRes.setText(pacientes.get(tabela.getSelectedRow()).getTelResPaciente());
        jFTelCom.setText(pacientes.get(tabela.getSelectedRow()).getTelComPaciente());
        jFCel.setText(pacientes.get(tabela.getSelectedRow()).getCelPaciente());
        jFId.setText(pacientes.get(tabela.getSelectedRow()).getIdPaciente());
        jFTelRec.setText(pacientes.get(tabela.getSelectedRow()).getTelRecPaciente());
        jTEmail.setText(pacientes.get(tabela.getSelectedRow()).getEmailPaciente());
        jTRua.setText(pacientes.get(tabela.getSelectedRow()).getRuaPaciente());
        jTNumero.setText(pacientes.get(tabela.getSelectedRow()).getNumeroPaciente());
        jTComplemento.setText(pacientes.get(tabela.getSelectedRow()).getComplPaciente());
        jFTCep.setText(pacientes.get(tabela.getSelectedRow()).getCepPaciente());
        jTBairro.setText(pacientes.get(tabela.getSelectedRow()).getBairroPaciente());
        jTCidade.setText(pacientes.get(tabela.getSelectedRow()).getCidadePaciente());
        jCEstado.setSelectedItem(pacientes.get(tabela.getSelectedRow()).getUfPaciente());
        jTPais.setText(pacientes.get(tabela.getSelectedRow()).getPaisPaciente());
        
         jLObrNome.setForeground(Color.BLACK);
                jLObrDtNasc.setForeground(Color.BLACK);
                jLObrRg.setForeground(Color.BLACK);
                jLObrCpf.setForeground(Color.BLACK);
                jLObrNac.setForeground(Color.BLACK);
                jLObrProfissao.setForeground(Color.BLACK);
                jLObrContato.setForeground(Color.BLACK);
                jLObrCep.setForeground(Color.BLACK);
                jLObrRua.setForeground(Color.BLACK);
                jLObrNum.setForeground(Color.BLACK);
                jLObrBairro.setForeground(Color.BLACK);
                jLObrCidade.setForeground(Color.BLACK);
                jLObrPais.setForeground(Color.BLACK);
        
        nomeigual = jTNome.getText();
        cpfigual = jFTCpf.getText();
        
         nome = jTNome.getText();
        rg = jTRg.getText();
        cpf = jFTCpf.getText();
        nac = jTNacionalidade.getText();
        profissao = jTProfissao.getText();
        conjugue = jTConjugue.getText();
        responsavel = jTResponsavel.getText();
        rgresp = jTRgResp.getText();
        motivo = jTMotivo.getText();
        obs = jTObs.getText();
        tel = jFTelRes.getText();
        telCom = jFTelCom.getText();
        cel = jFCel.getText();
        id = jFId.getText();
        telRec = jFTelRec.getText();
        email = jTEmail.getText();
        cep = jFTCep.getText();
        rua = jTRua.getText();
        numero = jTNumero.getText();
        compl = jTComplemento.getText();
        bairro = jTBairro.getText();
        cidade = jTCidade.getText();
        pais = jTPais.getText();
        jTPacientes.setSelectedComponent(jPDados);
        validaData();
        verificaEstadoCivil();
        
        
        jLValidacao.setVisible(false);
        try {
           listarConsultas();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Problemas no campo de pesquisa.\n "+ex);
        } 
          
        } else{
           limparDados();
       }
      
       jTPesquisar.setText("");
    }
   
        //Lista as consultas marcada o paciente selecionado
        protected void listarConsultas() throws SQLException{
        consultaDao dao = new consultaDao ();
        
                 consultas  = dao.getListaConsultaPaciente(jTNome.getText());
        mostraPesquisaConsulta(consultas );
             
    }
        //Mostra o resultado das consultas
         private void mostraPesquisaConsulta(List<atributos> consultas) {
      while(tmConsultas.getRowCount()>0){
          tmConsultas.removeRow(0);
      }
        if(consultas.isEmpty()){
          JOptionPane.showMessageDialog(null,"Nenhuma consulta agendada.","Consultas",JOptionPane.INFORMATION_MESSAGE);
      }else{
           
          String []linha = new String [] {null, null, null, null, null, null};
          for (int i = 0; i < consultas.size(); i++){
              tmConsultas.addRow(linha);
              tmConsultas.setValueAt(consultas.get(i).getDataConsulta(), i, 0);
              tmConsultas.setValueAt(consultas.get(i).getHorarioConsulta(), i, 1);
              tmConsultas.setValueAt(consultas.get(i).getNomePacConsulta(), i, 2);
              tmConsultas.setValueAt(consultas.get(i).getPsicologoConsulta(), i, 3);
              tmConsultas.setValueAt(consultas.get(i).getStatusConsulta(), i, 4);
              tmConsultas.setValueAt(consultas.get(i).getStatusPagConsulta(), i, 5);
               
          }
      }
    }
         //Passa todo o nome digitado para letras maiusculas
         public void upperCase(){
             String nomeUpper="";
         nomeUpper = jTNome.getText();
          jTNome.setText(nomeUpper.toUpperCase());
         }
         
         //Método para determinar se o cpf é válido ou não
         public void validaCPF(){
             if(jFTCpf.getText().length()==11){
            String CPF = jFTCpf.getText();
        int n1 = CPF.charAt(0) - 48;        int n2 = CPF.charAt(1) - 48;
        int n3 = CPF.charAt(2) - 48;        int n4 = CPF.charAt(3) - 48;
        int n5 = CPF.charAt(4) - 48;        int n6 = CPF.charAt(5) - 48;
        int n7 = CPF.charAt(6) - 48;        int n8 = CPF.charAt(7) - 48;
        int n9 = CPF.charAt(8) - 48;        int n10 = CPF.charAt(9) - 48;
        int n11 = CPF.charAt(10) - 48;
        //Calculo aqui
        int sm = (n1*10)+(n2*9)+(n3*8)+(n4*7)+(n5*6)+(n6*5)+(n7*4)+(n8*3)+(n9*2);
        int DV1=11 - (sm % 11);
        int sm2= (n1*11)+(n2*10)+(n3*9)+(n4*8)+(n5*7)+(n6*6)+(n7*5)+(n8*4)+(n9*3)+(n10*2);
        int DV2=11 - (sm2 % 11);
        if (CPF.equals("00000000000") || CPF.equals("11111111111") || CPF.equals("22222222222")
            || CPF.equals("33333333333") || CPF.equals("44444444444") || CPF.equals("55555555555")
            || CPF.equals("66666666666") || CPF.equals("77777777777") || CPF.equals("88888888888")
            || CPF.equals("99999999999"))
        {
            jLValidacao.setVisible(true);
            jLValidacao.setForeground(Color.RED);
            jLValidacao.setText("CPF Inválido");
                
        }else{
             if((DV1==n10||(DV1==10&&n10==0)||(DV1==11&&n10==0))&&(DV2==n11||(DV2==10&&n11==0)||(DV2==11&&n11==0))){
               jLValidacao.setVisible(true);
            jLValidacao.setForeground(Color.BLACK);
            jLValidacao.setText("CPF Válido");
            //System.out.println(DV1+" "+DV2);
                
            }else{
             jLValidacao.setVisible(true);
            jLValidacao.setForeground(Color.RED);
            jLValidacao.setText("CPF Inválido");
            }
             //cpf = jFTCpf.getText();
        }
        }
         }
         
         //Confirmação de saída
         public void sair(){
             UIManager.put("OptionPane.noButtonText", "Não");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
         int x = JOptionPane.showConfirmDialog(this, "Deseja encerrar o cadastro de pacientes?", "Alerta",0, 2);
        
        if (x==0) {
       this.dispose();
        }
    }
         //Verifica se a data é inválida. Exemplo: 30/02/2012
         public void validaData(){

    if(jCDia.getSelectedIndex()!=0 && jCMes.getSelectedIndex()!=0 && jCAno.getSelectedIndex()!=0 ){
        int ano = Integer.parseInt(jCAno.getSelectedItem().toString()); 
          if(jCMes.getSelectedIndex()==2 && jCDia.getSelectedIndex()>29 ||(jCMes.getSelectedIndex()==4 && jCDia.getSelectedIndex()>30 ||jCMes.getSelectedIndex()==6 && jCDia.getSelectedIndex()>30
              ||jCMes.getSelectedIndex()==9 && jCDia.getSelectedIndex()>30 ||jCMes.getSelectedIndex()==11 && jCDia.getSelectedIndex()>30 
               ||jCDia.getSelectedIndex()==29 && jCMes.getSelectedIndex()==2 && ano%4!=0)){
           jLDtInvalida.setVisible(true);
           jLDtInvalida.setText("Data inválida");
           jLDtInvalida.setForeground(Color.RED);
       }else{
            jLDtInvalida.setText("");  
            jLDtInvalida.setVisible(false);
            verificaIdade();
       }
    }else{
        jLDtInvalida.setText("");  
            jLDtInvalida.setVisible(false);
    }
  
}
          //Método para preencher o endereço automaticamente de acordo com o cep
         public void preencheEnd(){
             String uf="";
             switch(jCEstado.getSelectedIndex()){
                 case 0:
                    uf = "ac";
                     break;
                 case 1:
                     uf = "al";
                     break;
                 case 2:
                     uf = "am";
                     break;
                 case 3:
                     uf = "ap";
                     break;
                 case 4:
                     uf = "ba";
                     break;
                 case 5:
                     uf = "ce";
                     break;
                 case 6:
                     uf = "df";
                     break;
                 case 7:
                     uf = "es";
                     break;
                 case 8:
                     uf = "go";
                     break;
                 case 9:
                     uf = "ma";
                     break;
                 case 10:
                     uf = "mg";
                     break;
                 case 11:
                     uf = "ms";
                     break;
                 case 12:
                     uf = "mt";
                     break;
                 case 13:
                     uf = "pa";
                     break;
                 case 14:
                     uf = "pb";
                     break;
                 case 15:
                     uf = "pe";
                     break;
                 case 16:
                     uf = "pi";
                     break;
                 case 17:
                     uf = "pr";
                     break;
                 case 18:
                     uf = "rj";
                     break;
                 case 19:
                     uf = "rn";
                     break;
                 case 20:
                     uf = "ro";
                     break;
                 case 21:
                     uf = "rr";
                     break;
                 case 22:
                     uf = "rs";
                     break;
                 case 23:
                     uf = "sc";
                     break;
                 case 24:
                     uf = "se";
                     break;
                 case 25:
                     uf = "sp";
                     break;
                 case 26:
                     uf = "toc";
                     break;
                     
             }
             
               try{
             String sql = "select *from "+uf+" where cep like ?";
         PreparedStatement stmt = this.conexao.prepareStatement(sql);
         stmt.setString(1, jFTCep.getText());
         ResultSet rs = stmt.executeQuery();
         
         while(rs.next()){
             jTRua.setText(rs.getString("tp_logradouro")+" "+rs.getString("logradouro"));
             jTBairro.setText(rs.getString("bairro"));
             jTCidade.setText(rs.getString("cidade"));
             jTPais.setText("Brasil");
         }
         
         rs.close();
         stmt.close();
         
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null,"Erro ao pesquisar cep.\nErro: "+ex);
        }
         }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JFPacientes dialog = null;
                try {
                    dialog = new JFPacientes(new javax.swing.JFrame(), true);
                } catch (SQLException ex) {
                   JOptionPane.showMessageDialog(null,"Problema ao abrir formulário de cadsatro de pacientes\n"+ex);
                }
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAlterar;
    private javax.swing.JButton jBAnterior;
    private javax.swing.JButton jBAnterior2;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBExcluir;
    private javax.swing.JButton jBImprimir;
    private javax.swing.JButton jBNovo;
    private javax.swing.JButton jBPesquisa;
    private javax.swing.JButton jBPesquisar;
    private javax.swing.JButton jBProximo;
    private javax.swing.JButton jBProximo2;
    private javax.swing.JButton jBProximo3;
    private javax.swing.JButton jBSalvar;
    private javax.swing.JButton jBVoltar;
    private javax.swing.JComboBox jCAno;
    private javax.swing.JComboBox jCConvenio;
    private javax.swing.JComboBox jCDia;
    private javax.swing.JComboBox jCEstado;
    private javax.swing.JComboBox jCEstadoCivil;
    private javax.swing.JComboBox jCMes;
    private javax.swing.JComboBox jCPesquisa;
    private javax.swing.JComboBox jCSexo;
    private javax.swing.JFormattedTextField jFCel;
    private javax.swing.JFormattedTextField jFId;
    private javax.swing.JFormattedTextField jFTCep;
    private javax.swing.JTextField jFTCpf;
    private javax.swing.JFormattedTextField jFTelCom;
    private javax.swing.JFormattedTextField jFTelRec;
    private javax.swing.JFormattedTextField jFTelRes;
    private javax.swing.JLabel jLBairro;
    private javax.swing.JLabel jLCel;
    private javax.swing.JLabel jLCep;
    private javax.swing.JLabel jLCodigo;
    private javax.swing.JLabel jLComplemento;
    private javax.swing.JLabel jLConjugue;
    private javax.swing.JLabel jLConvenio;
    private javax.swing.JLabel jLCpf;
    private javax.swing.JLabel jLDataNasc;
    private javax.swing.JLabel jLDtInvalida;
    private javax.swing.JLabel jLEmail;
    private javax.swing.JLabel jLId;
    private javax.swing.JLabel jLMotivo;
    private javax.swing.JLabel jLNacionalidade;
    private javax.swing.JLabel jLNome;
    private javax.swing.JLabel jLNumero;
    private javax.swing.JLabel jLObrBairro;
    private javax.swing.JLabel jLObrCep;
    private javax.swing.JLabel jLObrCidade;
    private javax.swing.JLabel jLObrContato;
    private javax.swing.JLabel jLObrCpf;
    private javax.swing.JLabel jLObrDtNasc;
    private javax.swing.JLabel jLObrEstCivil;
    private javax.swing.JLabel jLObrNac;
    private javax.swing.JLabel jLObrNome;
    private javax.swing.JLabel jLObrNum;
    private javax.swing.JLabel jLObrPais;
    private javax.swing.JLabel jLObrProfissao;
    private javax.swing.JLabel jLObrRg;
    private javax.swing.JLabel jLObrRua;
    private javax.swing.JLabel jLObrSexo;
    private javax.swing.JLabel jLObrUf;
    private javax.swing.JLabel jLObs;
    private javax.swing.JLabel jLPesquisa;
    private javax.swing.JLabel jLProfissao;
    private javax.swing.JLabel jLResponsavel;
    private javax.swing.JLabel jLRg;
    private javax.swing.JLabel jLRgResp;
    private javax.swing.JLabel jLRua;
    private javax.swing.JLabel jLSexo;
    private javax.swing.JLabel jLTelCom;
    private javax.swing.JLabel jLTelRec;
    private javax.swing.JLabel jLTelRes;
    private javax.swing.JLabel jLUf;
    private javax.swing.JLabel jLValidacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPBotoes;
    private javax.swing.JPanel jPConsultas;
    private javax.swing.JPanel jPContato;
    private javax.swing.JPanel jPDados;
    private javax.swing.JPanel jPDadosPacientes;
    private javax.swing.JPanel jPEnd;
    private javax.swing.JPanel jPEndereco;
    private javax.swing.JPanel jPPesquisa;
    private javax.swing.JPanel jPTabela;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jSConsultas;
    private javax.swing.JScrollPane jSMotivo;
    private javax.swing.JScrollPane jSObs;
    private javax.swing.JScrollPane jSPesquisa;
    private javax.swing.JTextField jTBairro;
    private javax.swing.JTextField jTCidade;
    private javax.swing.JTextField jTCodigo;
    private javax.swing.JTextField jTComplemento;
    private javax.swing.JTextField jTConjugue;
    private javax.swing.JTable jTConsultas;
    private javax.swing.JTable jTDados;
    private javax.swing.JLabel jTDtNasc;
    private javax.swing.JTextField jTEmail;
    private javax.swing.JLabel jTEstCivil;
    private javax.swing.JTextArea jTMotivo;
    private javax.swing.JTextField jTNacionalidade;
    private javax.swing.JTextField jTNome;
    private javax.swing.JTextField jTNumero;
    private javax.swing.JTextArea jTObs;
    private javax.swing.JTabbedPane jTPacientes;
    private javax.swing.JTextField jTPais;
    private javax.swing.JTextField jTPesquisar;
    private javax.swing.JTextField jTProfissao;
    private javax.swing.JTextField jTResponsavel;
    private javax.swing.JFormattedTextField jTRg;
    private javax.swing.JTextField jTRgResp;
    private javax.swing.JTextField jTRua;
    // End of variables declaration//GEN-END:variables
}
