package mindmanager.forms;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import mindmanager.bancodedados.ConexaoImpressao;
import mindmanager.bancodedados.criarConexao;
import mindmanager.dao.psicologoDao;
import mindmanager.logica.Impressao;
import mindmanager.logica.atributos;
import net.sf.jasperreports.engine.JRException;

public class JFPsicologos extends javax.swing.JDialog {

     private Connection conexao;
    
    DefaultTableModel tmPsicologos = new DefaultTableModel(null, new String []{"Código", "CRP", "Nome", "CPF"});
    List<atributos> psicologos;
    ListSelectionModel lsmPsicologos;
    /**
     * Creates new form NewJDialog
     */
    public JFPsicologos(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        jTCrp.requestFocus();
         
         DateFormat dataa = new SimpleDateFormat("yyyy");
      Date date = new Date();
      String data = dataa.format(date);
        
         for(int i=Integer.valueOf(data)-18;i>=1887;i--){
                  jCAno.addItem(String.valueOf(i));
              }
         //conecta ao banco de dados
          this.conexao = criarConexao.getConexao();
          listarPsicologos();
          
          jTDados.getColumnModel().getColumn(0).setPreferredWidth(50);
          jTDados.getColumnModel().getColumn(1).setPreferredWidth(70);
          jTDados.getColumnModel().getColumn(2).setPreferredWidth(200);
          
          jLDtNasc.setVisible(false);
            this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/mindmanager/imagens/logo_mindmanager(48x48).png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTPsicologos = new javax.swing.JTabbedPane();
        jPDados = new javax.swing.JPanel();
        jPDadosGerais = new javax.swing.JPanel();
        jTCodigo = new javax.swing.JTextField();
        jLNome = new javax.swing.JLabel();
        jLCrp = new javax.swing.JLabel();
        jLCodigo = new javax.swing.JLabel();
        jTCrp = new javax.swing.JTextField();
        jLRg = new javax.swing.JLabel();
        jTNome = new javax.swing.JTextField();
        jLCpf = new javax.swing.JLabel();
        jTRg = new javax.swing.JTextField();
        jLData = new javax.swing.JLabel();
        jLObs = new javax.swing.JLabel();
        jSObs = new javax.swing.JScrollPane();
        jTObs = new javax.swing.JTextArea();
        jFTCpf = new javax.swing.JFormattedTextField();
        jCDia = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jCMes = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jCAno = new javax.swing.JComboBox();
        jLDtInvalida = new javax.swing.JLabel();
        jLValidacao = new javax.swing.JLabel();
        jLObrCRP = new javax.swing.JLabel();
        jLObrNome = new javax.swing.JLabel();
        jLObrDtNasc = new javax.swing.JLabel();
        jLObrRg = new javax.swing.JLabel();
        jLObrCpf = new javax.swing.JLabel();
        jLDtNasc = new javax.swing.JLabel();
        jBProximo = new javax.swing.JButton();
        jPContato = new javax.swing.JPanel();
        jPContatos = new javax.swing.JPanel();
        jLTelR = new javax.swing.JLabel();
        jLTelC = new javax.swing.JLabel();
        jLCel = new javax.swing.JLabel();
        jLId = new javax.swing.JLabel();
        jLTelRec = new javax.swing.JLabel();
        jLEmail = new javax.swing.JLabel();
        jTEmail = new javax.swing.JTextField();
        jFTelRec = new javax.swing.JFormattedTextField();
        jFId = new javax.swing.JFormattedTextField();
        jFCel = new javax.swing.JFormattedTextField();
        jFTelCom = new javax.swing.JFormattedTextField();
        jFTelRes = new javax.swing.JFormattedTextField();
        jLObrContato = new javax.swing.JLabel();
        jBProximo2 = new javax.swing.JButton();
        jBAnterior = new javax.swing.JButton();
        jPPesquisa = new javax.swing.JPanel();
        jPBusca = new javax.swing.JPanel();
        jBPesquisar = new javax.swing.JButton();
        jLBusca = new javax.swing.JLabel();
        jTPesquisar = new javax.swing.JTextField();
        jCBusca = new javax.swing.JComboBox();
        jSDados = new javax.swing.JScrollPane();
        jTDados = new javax.swing.JTable();
        jBVoltar = new javax.swing.JButton();
        jPBotoes = new javax.swing.JPanel();
        jBAlterar = new javax.swing.JButton();
        jBSalvar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jBImprimir = new javax.swing.JButton();
        jBNovo = new javax.swing.JButton();
        jBExcluir = new javax.swing.JButton();
        jBPesquisa = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cadastro de Psicólogos");
        setPreferredSize(new java.awt.Dimension(830, 387));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jPDadosGerais.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados"));

        jTCodigo.setEditable(false);

        jLNome.setText("Nome:");

        jLCrp.setText("Código CRP:");

        jLCodigo.setText("Código:");

        jTCrp.setEditable(false);
        jTCrp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCrpKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTCrpKeyReleased(evt);
            }
        });

        jLRg.setText("RG:");

        jTNome.setEditable(false);
        jTNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTNomeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTNomeKeyReleased(evt);
            }
        });

        jLCpf.setText("CPF:");

        jTRg.setEditable(false);
        jTRg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTRgKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTRgKeyReleased(evt);
            }
        });

        jLData.setText("Data de Nascimento:");

        jLObs.setText("Observações:");

        jTObs.setColumns(20);
        jTObs.setRows(5);
        jTObs.setEnabled(false);
        jTObs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTObsKeyPressed(evt);
            }
        });
        jSObs.setViewportView(jTObs);

        jFTCpf.setEditable(false);
        jFTCpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTCpfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTCpfKeyReleased(evt);
            }
        });

        jCDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dia", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jCDia.setEnabled(false);
        jCDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCDiaActionPerformed(evt);
            }
        });
        jCDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCDiaKeyPressed(evt);
            }
        });

        jLabel4.setText("/");

        jCMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mês", "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        jCMes.setEnabled(false);
        jCMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCMesActionPerformed(evt);
            }
        });
        jCMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCMesKeyPressed(evt);
            }
        });

        jLabel2.setText("/");

        jCAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ano" }));
        jCAno.setEnabled(false);
        jCAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCAnoActionPerformed(evt);
            }
        });
        jCAno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCAnoKeyPressed(evt);
            }
        });

        jLDtInvalida.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLDtInvalida.setForeground(new java.awt.Color(255, 0, 51));

        jLValidacao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLObrCRP.setText("(*)");

        jLObrNome.setText("(*)");

        jLObrDtNasc.setText("(*)");

        jLObrRg.setText("(*)");

        jLObrCpf.setText("(*)");

        jLDtNasc.setEnabled(false);

        jBProximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon.png"))); // NOI18N
        jBProximo.setToolTipText("Próxima aba");
        jBProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPDadosGeraisLayout = new javax.swing.GroupLayout(jPDadosGerais);
        jPDadosGerais.setLayout(jPDadosGeraisLayout);
        jPDadosGeraisLayout.setHorizontalGroup(
            jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLObrDtNasc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                .addComponent(jLData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCMes, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLDtInvalida, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                        .addComponent(jLObrCRP)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLCrp))
                                    .addComponent(jLCodigo)
                                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                        .addComponent(jLObrNome)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLNome)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                        .addComponent(jTNome, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLDtNasc))
                                    .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTCrp, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTCodigo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                                .addComponent(jLObrCpf)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLCpf))
                                            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                                .addComponent(jLObrRg)
                                                .addGap(6, 6, 6)
                                                .addComponent(jLRg)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jFTCpf)
                                            .addComponent(jTRg, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLValidacao, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                                        .addComponent(jLObs)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSObs, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPDadosGeraisLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPDadosGeraisLayout.setVerticalGroup(
            jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCodigo)
                    .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCrp)
                    .addComponent(jTCrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLObrCRP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLNome)
                    .addComponent(jLObrNome)
                    .addComponent(jLDtNasc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLData)
                        .addComponent(jCDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jCMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jCAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLObrDtNasc))
                    .addComponent(jLDtInvalida, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPDadosGeraisLayout.createSequentialGroup()
                        .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLRg, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLObrRg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLCpf)
                            .addComponent(jFTCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLObrCpf)))
                    .addComponent(jLValidacao, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPDadosGeraisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLObs)
                    .addComponent(jSObs, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBProximo))
        );

        javax.swing.GroupLayout jPDadosLayout = new javax.swing.GroupLayout(jPDados);
        jPDados.setLayout(jPDadosLayout);
        jPDadosLayout.setHorizontalGroup(
            jPDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPDadosGerais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPDadosLayout.setVerticalGroup(
            jPDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPDadosGerais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPsicologos.addTab("Dados Gerais", jPDados);

        jPContatos.setBorder(javax.swing.BorderFactory.createTitledBorder("Contato"));

        jLTelR.setText("Telefone Residencial:");

        jLTelC.setText("Telefone Comercial:");

        jLCel.setText("Celular:");

        jLId.setText("ID:");

        jLTelRec.setText("Telefone Para Recado:");

        jLEmail.setText("E-mail:");

        jTEmail.setEditable(false);
        jTEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTEmailKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTEmailKeyReleased(evt);
            }
        });

        jFTelRec.setEditable(false);
        jFTelRec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTelRecKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTelRecKeyReleased(evt);
            }
        });

        jFId.setEditable(false);
        jFId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFIdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFIdKeyReleased(evt);
            }
        });

        jFCel.setEditable(false);
        jFCel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFCelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFCelKeyReleased(evt);
            }
        });

        jFTelCom.setEditable(false);
        jFTelCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTelComKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTelComKeyReleased(evt);
            }
        });

        jFTelRes.setEditable(false);
        jFTelRes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFTelResKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFTelResKeyReleased(evt);
            }
        });

        jLObrContato.setText("Preencha pelo menos um campo de contato");

        jBProximo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon.png"))); // NOI18N
        jBProximo2.setToolTipText("Próxima aba");
        jBProximo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximo2ActionPerformed(evt);
            }
        });

        jBAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon2.png"))); // NOI18N
        jBAnterior.setToolTipText("Aba anterior");
        jBAnterior.setOpaque(false);
        jBAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnteriorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPContatosLayout = new javax.swing.GroupLayout(jPContatos);
        jPContatos.setLayout(jPContatosLayout);
        jPContatosLayout.setHorizontalGroup(
            jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPContatosLayout.createSequentialGroup()
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPContatosLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLObrContato)
                            .addGroup(jPContatosLayout.createSequentialGroup()
                                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLEmail)
                                    .addComponent(jLTelRec)
                                    .addComponent(jLId)
                                    .addComponent(jLCel)
                                    .addComponent(jLTelC)
                                    .addComponent(jLTelR))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jFTelCom)
                                    .addComponent(jFCel)
                                    .addComponent(jFTelRec)
                                    .addComponent(jFId, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                    .addComponent(jFTelRes)
                                    .addComponent(jTEmail))))
                        .addGap(0, 246, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPContatosLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBProximo2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPContatosLayout.setVerticalGroup(
            jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPContatosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLObrContato)
                .addGap(21, 21, 21)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTelR)
                    .addComponent(jFTelRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTelC)
                    .addComponent(jFTelCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCel)
                    .addComponent(jFCel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLId)
                    .addComponent(jFId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTelRec)
                    .addComponent(jFTelRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLEmail)
                    .addComponent(jTEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPContatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBProximo2)
                    .addComponent(jBAnterior)))
        );

        javax.swing.GroupLayout jPContatoLayout = new javax.swing.GroupLayout(jPContato);
        jPContato.setLayout(jPContatoLayout);
        jPContatoLayout.setHorizontalGroup(
            jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPContatoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPContatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPContatoLayout.setVerticalGroup(
            jPContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPContatoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPContatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPsicologos.addTab("Contato", jPContato);

        jPPesquisa.setPreferredSize(new java.awt.Dimension(478, 302));

        jPBusca.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisar"));

        jBPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Start-Menu-Search-icon.png"))); // NOI18N
        jBPesquisar.setText("Pesquisar");
        jBPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisarActionPerformed(evt);
            }
        });

        jLBusca.setText("Busca por:");

        jTPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTPesquisarKeyReleased(evt);
            }
        });

        jCBusca.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome", "Código", "CRP" }));
        jCBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBuscaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPBuscaLayout = new javax.swing.GroupLayout(jPBusca);
        jPBusca.setLayout(jPBuscaLayout);
        jPBuscaLayout.setHorizontalGroup(
            jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBuscaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLBusca)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPesquisar)
                .addContainerGap())
        );
        jPBuscaLayout.setVerticalGroup(
            jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jBPesquisar)
                .addComponent(jLBusca)
                .addComponent(jTPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTDados.setModel(tmPsicologos);
        jTDados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTDadosMouseClicked(evt);
            }
        });
        jSDados.setViewportView(jTDados);

        jBVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Arrow-Right-icon2.png"))); // NOI18N
        jBVoltar.setToolTipText("Voltar à primeira aba");
        jBVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPPesquisaLayout = new javax.swing.GroupLayout(jPPesquisa);
        jPPesquisa.setLayout(jPPesquisaLayout);
        jPPesquisaLayout.setHorizontalGroup(
            jPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSDados, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                    .addComponent(jPBusca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPesquisaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPPesquisaLayout.setVerticalGroup(
            jPPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSDados, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBVoltar)
                .addGap(5, 5, 5))
        );

        jTPsicologos.addTab("Pesquisa", jPPesquisa);

        getContentPane().add(jTPsicologos);
        jTPsicologos.setBounds(29, 30, 610, 340);

        jPBotoes.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jBAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/pencil (25x25).png"))); // NOI18N
        jBAlterar.setText("Alterar");
        jBAlterar.setEnabled(false);
        jBAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlterarActionPerformed(evt);
            }
        });

        jBSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/disk (25x25).png"))); // NOI18N
        jBSalvar.setText("Salvar");
        jBSalvar.setEnabled(false);
        jBSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalvarActionPerformed(evt);
            }
        });

        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/ico_delete.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.setEnabled(false);
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/print-icon.png"))); // NOI18N
        jBImprimir.setText("Imprimir");
        jBImprimir.setEnabled(false);
        jBImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImprimirActionPerformed(evt);
            }
        });

        jBNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/add (25x25).png"))); // NOI18N
        jBNovo.setText("Novo");
        jBNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovoActionPerformed(evt);
            }
        });

        jBExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/lixo (25x25).png"))); // NOI18N
        jBExcluir.setText("Excluir");
        jBExcluir.setEnabled(false);
        jBExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExcluirActionPerformed(evt);
            }
        });

        jBPesquisa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/Start-Menu-Search-icon (1).png"))); // NOI18N
        jBPesquisa.setText("Pesquisar");
        jBPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPBotoesLayout = new javax.swing.GroupLayout(jPBotoes);
        jPBotoes.setLayout(jPBotoesLayout);
        jPBotoesLayout.setHorizontalGroup(
            jPBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBNovo, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jBPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPBotoesLayout.setVerticalGroup(
            jPBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jBImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(jPBotoes);
        jPBotoes.setBounds(650, 50, 160, 280);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("(*) -> Campos obrigatórios");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(660, 350, 160, 14);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mindmanager/imagens/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 830, 390);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-846)/2, (screenSize.height-425)/2, 846, 425);
    }// </editor-fold>//GEN-END:initComponents

    private void jBAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlterarActionPerformed
        try {
            upperCase();
            validaCPF();
            alteraPsicologo();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Problema no botão alterar.\n"+ex);
        }
    }//GEN-LAST:event_jBAlterarActionPerformed
String crp,nome;
    private void jBSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalvarActionPerformed
        upperCase();
        validaCPF();
        try {
            cadastrarPsicologo();
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null,"Problema no botão salvar.\n"+ex);
        }

        crp = "";
        nome = "";
    }//GEN-LAST:event_jBSalvarActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        limparDados();
        desabilitaDados();
        jTPsicologos.setSelectedComponent(jPDados);
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImprimirActionPerformed
        if (verificaDados()) {
           impressaoPsicologo();
        } else {
            JOptionPane.showMessageDialog(null, "Todos os campos obrigatórios devem ser preenchidos para impressão.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jBImprimirActionPerformed

    private void jBNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovoActionPerformed
        habilitaDados();
        limparDados();
        jBAlterar.setEnabled(false);
        jTCrp.requestFocus();
    }//GEN-LAST:event_jBNovoActionPerformed

    private void jBExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExcluirActionPerformed
        try {
            excluirPsicologo();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro no botão excluir.\n" + ex);
        }
    }//GEN-LAST:event_jBExcluirActionPerformed

    private void jTCrpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCrpKeyPressed
        //Pula para linha de baixo ao apertar shift ou alt
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTNome.requestFocus();
        }

        if (jTCrp.getText().length() < 30) {

            jLValidacao.setVisible(false);
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                crp = jTCrp.getText();

            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                validaCPF();
                jTCrp.setText("");
                jTCrp.setText(crp);
            }
        } else {
            jTCrp.setText("");
            jTCrp.setText(crp);
        }



        if (jTCrp.getText().length() > 29) {
            if (evt.getKeyCode() != 10) {
                jTCrp.setText("");
                jTCrp.setText(crp);

            }
        }

        if (evt.getKeyCode() == 10) {
            jTNome.requestFocus();
        }
    }//GEN-LAST:event_jTCrpKeyPressed

    private void jTCrpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCrpKeyReleased
        if (jTCrp.getText().length() < 30) {

            jLValidacao.setVisible(false);
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                crp = jTCrp.getText();

            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                validaCPF();
                jTCrp.setText("");
                jTCrp.setText(crp);
            }
        } else {
            jTCrp.setText("");
            jTCrp.setText(crp);
        }



        if (jTCrp.getText().length() > 29) {
            if (evt.getKeyCode() != 10) {
                jTCrp.setText("");
                jTCrp.setText(crp);

            }
        }
    }//GEN-LAST:event_jTCrpKeyReleased

    private void jTNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNomeKeyPressed

        if (evt.getKeyCode() == 10) {
            jCDia.requestFocus();
        }

        if (jTNome.getText().length() < 80) {

            nome = jTNome.getText();

        }

        if (jTNome.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTNome.setText("");
                jTNome.setText(nome);
            }

        }

        if (evt.getKeyCode() == 38) {
            jTCrp.requestFocus();
        }
    }//GEN-LAST:event_jTNomeKeyPressed

    private void jTNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTNomeKeyReleased
        if (jTNome.getText().length() < 80) {

            nome = jTNome.getText();

        }

        if (jTNome.getText().length() > 79) {
            if (evt.getKeyCode() != 10) {
                jTNome.setText("");
                jTNome.setText(nome);
            }

        }
    }//GEN-LAST:event_jTNomeKeyReleased
String rg;
    private void jTRgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRgKeyPressed
        if (evt.getKeyCode() == 38) {
            //upperCase();
            jCAno.requestFocus();
        }

        if (evt.getKeyCode() == 10) {
            jFTCpf.requestFocus();
        }


        if (jTRg.getText().length() < 15) {
            rg = jTRg.getText();
        }

        if (jTRg.getText().length() > 14) {
            if (evt.getKeyCode() != 10) {
                jTRg.setText("");
                jTRg.setText(rg);
            }

        }
    }//GEN-LAST:event_jTRgKeyPressed

    private void jTRgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTRgKeyReleased

        if (jTRg.getText().length() < 15) {
            rg = jTRg.getText();
        }


        if (jTRg.getText().length() > 14) {
            if (evt.getKeyCode() != 10) {
                jTRg.setText("");
                jTRg.setText(rg);
            }

        }
    }//GEN-LAST:event_jTRgKeyReleased
String obs;
    private void jTObsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTObsKeyPressed
        if (jTObs.getText().length() < 200) {
            obs = jTObs.getText();
        }


        if (jTObs.getText().length() > 199) {
            if (evt.getKeyCode() != 10) {
                jTObs.setText("");
                jTObs.setText(obs);
            }

        }
    }//GEN-LAST:event_jTObsKeyPressed
String cpf;
    private void jFTCpfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTCpfKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTObs.requestFocus();
        }
        if (jFTCpf.getText().length() <= 11) {

            jLValidacao.setVisible(false);
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cpf = jFTCpf.getText();
                validaCPF();


            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                validaCPF();
                jFTCpf.setText("");
                jFTCpf.setText(cpf);
            }
        } else {
            jFTCpf.setText("");
            jFTCpf.setText(cpf);
        }



        if (jFTCpf.getText().length() > 11) {
            if (evt.getKeyCode() != 10) {
                jFTCpf.setText("");
                jFTCpf.setText(cpf);

            }

        }

        if (evt.getKeyCode() == 10) {
            jTObs.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jTRg.requestFocus();
        }
    }//GEN-LAST:event_jFTCpfKeyPressed

    private void jFTCpfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTCpfKeyReleased
        if (jFTCpf.getText().length() <= 11) {

            jLValidacao.setVisible(false);
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cpf = jFTCpf.getText();
                validaCPF();


            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);

                jFTCpf.setText("");
                jFTCpf.setText(cpf);
            }
        } else {
            jFTCpf.setText("");
            jFTCpf.setText(cpf);
        }



        if (jFTCpf.getText().length() > 11) {
            if (evt.getKeyCode() != 10) {
                validaCPF();
                jFTCpf.setText("");
                jFTCpf.setText(cpf);

            }

        }
    }//GEN-LAST:event_jFTCpfKeyReleased

    private void jCDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCDiaActionPerformed
        validaData();
    }//GEN-LAST:event_jCDiaActionPerformed

    private void jCDiaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCDiaKeyPressed
        if (evt.getKeyCode() == 10) {
            jCMes.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jTNome.requestFocus();
        }
    }//GEN-LAST:event_jCDiaKeyPressed

    private void jCMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCMesActionPerformed
        validaData();
    }//GEN-LAST:event_jCMesActionPerformed

    private void jCMesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCMesKeyPressed
        if (evt.getKeyCode() == 10) {
            jCAno.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            // upperCase();
            jCDia.requestFocus();
        }
    }//GEN-LAST:event_jCMesKeyPressed

    private void jCAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCAnoActionPerformed
        validaData();
    }//GEN-LAST:event_jCAnoActionPerformed

    private void jCAnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCAnoKeyPressed
        if (evt.getKeyCode() == 10) {
            jTRg.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            //upperCase();
            jCMes.requestFocus();
        }
    }//GEN-LAST:event_jCAnoKeyPressed
    String email;
    private void jTEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTEmailKeyPressed
        if (jTEmail.getText().length() < 30) {
            email = jTEmail.getText();
        }


        if (jTEmail.getText().length() > 29) {
            if (evt.getKeyCode() != 10) {
                jTEmail.setText("");
                jTEmail.setText(email);
            }

        }


        if (evt.getKeyCode() == 38) {

            jFTelRec.requestFocus();

        }
    }//GEN-LAST:event_jTEmailKeyPressed

    private void jTEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTEmailKeyReleased
        if (jTEmail.getText().length() < 30) {
            email = jTEmail.getText();
        }


        if (jTEmail.getText().length() > 29) {
            if (evt.getKeyCode() != 10) {
                jTEmail.setText("");
                jTEmail.setText(email);
            }

        }
    }//GEN-LAST:event_jTEmailKeyReleased
   String telRec;
    private void jFTelRecKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelRecKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTEmail.requestFocus();
        }
        if (jFTelRec.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telRec = jFTelRec.getText();
                if (jFTelRec.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText("(" + telRec);
                    }

                } else if (jFTelRec.getText().length() == 4 && !jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + ")");
                    }
                } else if (jFTelRec.getText().length() == 5 && jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec);
                    }
                } else if (jFTelRec.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + "-");
                    }
                }
                telRec = jFTelRec.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }
        } else {
            jFTelRec.setText("");
            jFTelRec.setText(telRec);
        }




        if (jFTelRec.getText().length() > 14 || jFTelRec.getText().length() > 0 && jFTelRec.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }

        }

        if (evt.getKeyCode() == 10) {

            jTEmail.requestFocus();
        }

        if (evt.getKeyCode() == 38) {

            jFId.requestFocus();
        }
    }//GEN-LAST:event_jFTelRecKeyPressed

    private void jFTelRecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelRecKeyReleased

        if (jFTelRec.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telRec = jFTelRec.getText();
                if (jFTelRec.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText("(" + telRec);
                    }

                } else if (jFTelRec.getText().length() == 4 && !jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + ")");
                    }
                } else if (jFTelRec.getText().length() == 5 && jFTelRec.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec);
                    }
                } else if (jFTelRec.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telRec = jFTelRec.getText();
                        jFTelRec.setText(telRec + "-");
                    }
                }
                telRec = jFTelRec.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }
        } else {
            jFTelRec.setText("");
            jFTelRec.setText(telRec);
        }




        if (jFTelRec.getText().length() > 14 || jFTelRec.getText().length() > 0 && jFTelRec.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRec.setText("");
                jFTelRec.setText(telRec);
            }

        }


    }//GEN-LAST:event_jFTelRecKeyReleased
       String id;
    private void jFIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFIdKeyPressed
        if (evt.getKeyCode() == 18) {
            jTEmail.requestFocus();
        }
        if (jFId.getText().length() < 20) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() == 10 || evt.getKeyCode() == 38 || evt.getKeyCode() == 16) {
                id = jFId.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFId.setText("");
                jFId.setText(id);
            }
        }

        if (jFId.getText().length() > 19) {
            if (evt.getKeyCode() != 10) {
                jFId.setText("");
                jFId.setText(id);
            }
        }


        if (evt.getKeyCode() == 10) {
            jFTelRec.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jFCel.requestFocus();
        }

    }//GEN-LAST:event_jFIdKeyPressed

    private void jFIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFIdKeyReleased
        if (jFId.getText().length() < 20) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() == 10 || evt.getKeyCode() == 38 || evt.getKeyCode() == 16) {
                id = jFId.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFId.setText("");
                jFId.setText(id);
            }
        }

        if (jFId.getText().length() > 19) {
            if (evt.getKeyCode() != 10) {
                jFId.setText("");
                jFId.setText(id);
            }
        }
    }//GEN-LAST:event_jFIdKeyReleased
          String cel;
    private void jFCelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFCelKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTEmail.requestFocus();
        }
        if (jFCel.getText().length() <= 15) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cel = jFCel.getText();
                if (jFCel.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText("(" + cel);
                    }

                } else if (jFCel.getText().length() == 4 && !jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + ")");
                    }
                } else if (jFCel.getText().length() == 5 && jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel);
                    }
                } else if (jFCel.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + "-");
                    }
                }
                cel = jFCel.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFCel.setText("");
                jFCel.setText(cel);
            }
        } else {
            jFCel.setText("");
            jFCel.setText(cel);
        }




        if (jFCel.getText().length() > 15 || jFCel.getText().length() > 0 && jFCel.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFCel.setText("");
                jFCel.setText(cel);
            }

        }

        if (evt.getKeyCode() == 10) {
            upperCase();
            jFId.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            upperCase();
            jFTelCom.requestFocus();
        }
    }//GEN-LAST:event_jFCelKeyPressed

    private void jFCelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFCelKeyReleased
        if (jFCel.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                cel = jFCel.getText();
                if (jFCel.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText("(" + cel);
                    }

                } else if (jFCel.getText().length() == 4 && !jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + ")");
                    }
                } else if (jFCel.getText().length() == 5 && jFCel.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel);
                    }
                } else if (jFCel.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        cel = jFCel.getText();
                        jFCel.setText(cel + "-");
                    }
                }
                cel = jFCel.getText();
            } else {
                jFCel.setText("");
                jFCel.setText(cel);
            }
        } else {
            jFCel.setText("");
            jFCel.setText(cel);
        }




        if (jFCel.getText().length() > 14 || jFCel.getText().length() > 0 && jFCel.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFCel.setText("");
                jFCel.setText(cel);
            }

        }
    }//GEN-LAST:event_jFCelKeyReleased
String telCom;
    private void jFTelComKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelComKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTEmail.requestFocus();
        }
        if (jFTelCom.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telCom = jFTelCom.getText();
                if (jFTelCom.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText("(" + telCom);
                    }

                } else if (jFTelCom.getText().length() == 4 && !jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + ")");
                    }
                } else if (jFTelCom.getText().length() == 5 && jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom);
                    }
                } else if (jFTelCom.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + "-");
                    }
                }
                telCom = jFTelCom.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }
        } else {
            jFTelCom.setText("");
            jFTelCom.setText(telCom);
        }




        if (jFTelCom.getText().length() > 14 || jFTelCom.getText().length() > 0 && jFTelCom.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }

        }

        if (evt.getKeyCode() == 10) {
            upperCase();
            jFCel.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            upperCase();
            jFTelRes.requestFocus();
        }
    }//GEN-LAST:event_jFTelComKeyPressed

    private void jFTelComKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelComKeyReleased
        if (jFTelCom.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                telCom = jFTelCom.getText();
                if (jFTelCom.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText("(" + telCom);
                    }

                } else if (jFTelCom.getText().length() == 4 && !jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + ")");
                    }
                } else if (jFTelCom.getText().length() == 5 && jFTelCom.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom);
                    }
                } else if (jFTelCom.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        telCom = jFTelCom.getText();
                        jFTelCom.setText(telCom + "-");
                    }
                }
                telCom = jFTelCom.getText();
            } else {
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }
        } else {
            jFTelCom.setText("");
            jFTelCom.setText(telCom);
        }




        if (jFTelCom.getText().length() > 14 || jFTelCom.getText().length() > 0 && jFTelCom.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelCom.setText("");
                jFTelCom.setText(telCom);
            }

        }
    }//GEN-LAST:event_jFTelComKeyReleased
String tel;
    private void jFTelResKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelResKeyPressed
        if (evt.getKeyCode() == 16 || evt.getKeyCode() == 18) {
            jTEmail.requestFocus();
        }
        if (jFTelRes.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                tel = jFTelRes.getText();
                if (jFTelRes.getText().length() == 0) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText("(" + tel);
                    }

                } else if (jFTelRes.getText().length() == 4 && !jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + ")");
                    }
                } else if (jFTelRes.getText().length() == 5 && jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel);
                    }
                } else if (jFTelRes.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + "-");
                    }
                }
                tel = jFTelRes.getText();
            } else {
                JOptionPane.showMessageDialog(this, "Digite apenas números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }
        } else {
            jFTelRes.setText("");
            jFTelRes.setText(tel);
        }




        if (jFTelRes.getText().length() > 14 || jFTelRes.getText().length() > 0 && jFTelRes.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }

        }

        if (evt.getKeyCode() == 10) {
            jFTelCom.requestFocus();
        }

        if (evt.getKeyCode() == 38) {
            jTObs.requestFocus();
            jTPsicologos.setSelectedComponent(jPDados);
        }
    }//GEN-LAST:event_jFTelResKeyPressed

    private void jFTelResKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFTelResKeyReleased
        if (jFTelRes.getText().length() <= 14) {
            if (evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                    || evt.getKeyCode() == 8 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40 || evt.getKeyCode() == 10) {
                tel = jFTelRes.getText();
                if (jFTelRes.getText().length() == 0) {
                    if (evt.getKeyCode() != 8 || evt.getKeyCode() != 10) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText("(" + tel);
                    }

                } else if (jFTelRes.getText().length() == 4 && !jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + ")");
                    }
                } else if (jFTelRes.getText().length() == 5 && jFTelRes.getText().contains(")")) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel);
                    }
                } else if (jFTelRes.getText().length() == 9) {
                    if (evt.getKeyCode() != 8) {
                        tel = jFTelRes.getText();
                        jFTelRes.setText(tel + "-");
                    }
                }
                tel = jFTelRes.getText();
            } else {
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }
        } else {
            jFTelRes.setText("");
            jFTelRes.setText(tel);
        }




        if (jFTelRes.getText().length() > 14 || jFTelRes.getText().length() > 0 && jFTelRes.getText().charAt(0) == '(') {
            if (evt.getKeyCode() != 10 || evt.getKeyCode() != 8) {
                jFTelRes.setText("");
                jFTelRes.setText(tel);
            }

        }
    }//GEN-LAST:event_jFTelResKeyReleased

    private void jBPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisarActionPerformed
        //Realiza a pesquisa
        try {
            listarPsicologos();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Problemas no botão de pesquisa. \n" + ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Nenhhum psicólogo encontrado.\n " + e);
        }

        //Apresenta mensagem caso não encontre o que foi procurado
        if (msg == false) {
            JOptionPane.showMessageDialog(null, "Nenhum psicólogo encontrado.", "Pesquisa", JOptionPane.INFORMATION_MESSAGE);
        }
        jTPesquisar.requestFocus();
    }//GEN-LAST:event_jBPesquisarActionPerformed

    private void jTPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPesquisarKeyReleased
        if (evt.getKeyCode() >= 60 && evt.getKeyCode() <= 90 || evt.getKeyCode() >= 37 && evt.getKeyCode() <= 40
                || evt.getKeyCode() >= 48 && evt.getKeyCode() <= 57 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105
                || evt.getKeyCode() == 8 || evt.getKeyCode() == 10) {
            try {
                listarPsicologos();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Problemas no campo de pesquisa.\n " + ex);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Nenhhum psicólogo encontrado.\n " + e);
            }
            jTPesquisar.requestFocus();
        }
    }//GEN-LAST:event_jTPesquisarKeyReleased

    private void jCBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBuscaActionPerformed
        try {
            listarPsicologos();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Problema ao selecionar tipo de pesquisa.\n"+ex);
        }
    }//GEN-LAST:event_jCBuscaActionPerformed

    private void jTDadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDadosMouseClicked
        //Ao clicar na linha, os dados são passados para os TextFields
        linhaSelecionada(jTDados);
    }//GEN-LAST:event_jTDadosMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        sair();
    }//GEN-LAST:event_formWindowClosing

    private void jBPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisaActionPerformed
        jTPsicologos.setSelectedComponent(jPPesquisa);
    }//GEN-LAST:event_jBPesquisaActionPerformed

    private void jBProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximoActionPerformed
        jTPsicologos.setSelectedComponent(jPContato);
    }//GEN-LAST:event_jBProximoActionPerformed

    private void jBProximo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximo2ActionPerformed
        jTPsicologos.setSelectedComponent(jPPesquisa);
    }//GEN-LAST:event_jBProximo2ActionPerformed

    private void jBAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnteriorActionPerformed
       jTPsicologos.setSelectedComponent(jPDados);   
    }//GEN-LAST:event_jBAnteriorActionPerformed

    private void jBVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVoltarActionPerformed
       jTPsicologos.setSelectedComponent(jPDados); 
    }//GEN-LAST:event_jBVoltarActionPerformed

    //MÉTODOS
    
    
    //Cadastra os psicólogos no banco de dados
     public void cadastrarPsicologo() throws SQLException{
         String data="";
         //Verifica se todos os dados obrigatórios foram preenchidos
        if(verificaDados()){
            
            String sql = "select *from psicologo";
         PreparedStatement stmt = this.conexao.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery();
         boolean igual=false;
        
         
        
         //Verifica se o crp, nome ou cpf usado já está cadastrado no sistema
         while(rs.next()){
             if(jTCrp.getText().equals(rs.getString("crp_psicologo")) || jTNome.getText().equals(rs.getString("nome_psicologo"))||
                     jFTCpf.getText().equals(rs.getString("cpf_psicologo"))){
                 igual=true; 
             }
         }
         
         rs.close();
         stmt.close();
             //Seta os dados digitados
         if(igual==false){
                  try {
            atributos user = new atributos();
            user.setCrp(jTCrp.getText());
            user.setNomePsicologo(jTNome.getText());
            user.setDiaPsicologo(jCDia.getSelectedItem().toString());
                user.setMesPsicologo(jCMes.getSelectedItem().toString());
               user.setAnoPsicologo(jCAno.getSelectedItem().toString());
             data = jCDia.getSelectedItem().toString();
          data = data+"/"+jCMes.getSelectedItem().toString();
        data = data+"/"+jCAno.getSelectedItem();toString();
            user.setDtNascPsicologo(data);
            user.setRgPsicologo(jTRg.getText());
            user.setCpfPsicologo(jFTCpf.getText());
            user.setObsPsicologo((jTObs.getText()));
            user.setTelResPsicologo(jFTelRes.getText());
            user.setTelComPsicologo(jFTelCom.getText());
            user.setCelPsicologo(jFCel.getText());
            user.setIdPsicologo(jFId.getText());
            user.setTelRecPsicologo(jFTelRec.getText());
            user.setEmailPsicologo(jTEmail.getText());

           
            psicologoDao dao = new psicologoDao();
            dao.cadastroPsicologo(user);
            desabilitaDados();
            JOptionPane.showMessageDialog(null, "Psicólogo cadastrado com sucesso.","Cadastro",JOptionPane.INFORMATION_MESSAGE); 
            listarPsicologos();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Erro com o banco de dados.","Erro!",JOptionPane.ERROR_MESSAGE);
        }
         }else{
             JOptionPane.showMessageDialog(this, "Este nome ou CPF já está cadastrado no sistema.","Atenção",JOptionPane.WARNING_MESSAGE);
         }
       
        }
    }
     
   //Exclui psicólogo do banco de dados
    public void excluirPsicologo() throws SQLException{
        UIManager.put("OptionPane.noButtonText", "Não");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
         int resp = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este psicólogo?", "Confirmação", JOptionPane.YES_NO_OPTION);
         if (resp == JOptionPane.YES_NO_OPTION){
                psicologoDao dao;
                dao = new psicologoDao();
                dao.excluirPsicologo(psicologos.get(jTDados.getSelectedRow()));
                mostraPesquisa(psicologos);
                JOptionPane.showMessageDialog(null,"Psicólogo excluído com sucesso.","Excluir",JOptionPane.INFORMATION_MESSAGE);
                listarPsicologos();
                limparDados();
               desabilitaDados();
         }
        }
   
    String nomeigual,cpfigual,crpigual;
    //Altera algum dado de psicólogo cadastrado
    private void alteraPsicologo() throws SQLException {
        String data="";
        if(jTDados.getSelectedRow() != -1){// Se a linha selecionada na tabela for diferente de 1, ou seja,
            //se houver algum paciente cadastrado, o usuário receberá a mensagem de confirmação
           UIManager.put("OptionPane.noButtonText", "Não");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
            int resp = JOptionPane.showConfirmDialog(this, "Deseja realmente alterar este psicólogo?", "Confirmação", 0,3);
         if (resp == 0){
             if(verificaDados()){
                 
                   String sql = "select *from psicologo";
         PreparedStatement stmt = this.conexao.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery();
         boolean crp_igual=false;
         boolean nome_igual=false;
         boolean cpf_igual=false;
        
         
          //Se o usuário tentar alterar o nome ou o cpf ou o crp para algum já cadastrado o programa irá impedir
         if(!jTCrp.getText().equals(crpigual) ){
             while(rs.next()){
                
              if(jTCrp.getText().equals(rs.getString("crp_psicologo"))){
                 crp_igual=true;
             }        
         }
         }
             
          if(!jTNome.getText().equals(nomeigual)){
              while(rs.next()){
                  if(jTNome.getText().equals(rs.getString("nome_psicologo"))){
                 nome_igual=true; 
             }
              }
          }
          
             
          if(!jFTCpf.getText().equals(cpfigual)){
              while(rs.next()){
                  if(jFTCpf.getText().equals(rs.getString("cpf_psicologo"))){
                 cpf_igual=true;
             }
              }
          }    
         
         
         rs.close();
         stmt.close();
         
         
         if(crp_igual==false && nome_igual==false && cpf_igual==false) {
              atributos at = new atributos();
                psicologoDao dao =  new psicologoDao();
                at.setCodigoPsicologo(Long.valueOf(jTCodigo.getText()));
                at.setCrp(jTCrp.getText());
                at.setNomePsicologo(jTNome.getText());
                 at.setDiaPsicologo(jCDia.getSelectedItem().toString());
                at.setMesPsicologo(jCMes.getSelectedItem().toString());
               at.setAnoPsicologo(jCAno.getSelectedItem().toString());
                 data = jCDia.getSelectedItem().toString();
       data = data+"/"+jCMes.getSelectedItem().toString();
        data = data+"/"+jCAno.getSelectedItem();toString();
            at.setDtNascPsicologo(data);
                at.setRgPsicologo(jTRg.getText());
                at.setCpfPsicologo(jFTCpf.getText());
                at.setObsPsicologo(jTObs.getText());
                at.setTelResPsicologo(jFTelRes.getText());
                at.setTelComPsicologo(jFTelCom.getText());
                at.setCelPsicologo(jFCel.getText());
                at.setIdPsicologo(jFId.getText());
                at.setTelRecPsicologo(jFTelRec.getText());
                at.setEmailPsicologo(jTEmail.getText());
                dao.alteraPsicologo(at);
                 JOptionPane.showMessageDialog(null,"Psicólogo alterado com sucesso.","Alterar",JOptionPane.INFORMATION_MESSAGE);
                 listarPsicologos();
                 desabilitaDados();
         } else{
              JOptionPane.showMessageDialog(this, "Este código CRP, nome ou CPF já está cadastrado no sistema.","Atenção",JOptionPane.WARNING_MESSAGE);
         }         
            }
        }
         }
            
         }
    
     public void impressaoPsicologo() {
	 
	    // note que estamos chamando o novo relatório
	    InputStream inputStream = getClass().getResourceAsStream( "/Psicologos.jasper" );
	 
	    // mapa de parâmetros do relatório
	    Map parametros = new HashMap();
	 
	    /*
	     * Insere o parâmetro primeiroNome no mapa, com o valor F%
	     * ou seja, todos os clientes que tenham primeiro nome começando
	     * com a letra F.
	     */
	    parametros.put( "codigoPsicologo", jTCodigo.getText() );
	 
	    // outros possíveis parâmetros aqui...
	 
	    try {
	 
	        // abre o relatório
	        Impressao.openReport( "Psicologos", inputStream, parametros,
	                ConexaoImpressao.getMindConnection() );
                
	  this.dispose();
	    } catch ( SQLException exc ) {
	        exc.printStackTrace();
	    } catch ( JRException exc ) {
	        exc.printStackTrace();
	    }
	 
	}
    
    //Passa o nome digitado para letras maiusculas
    public void upperCase(){
             String nomeUpper="";
         nomeUpper = jTNome.getText();
          jTNome.setText(nomeUpper.toUpperCase());
         }
    
    //Verifica se o cpf é válido
    public void validaCPF(){
             if(jFTCpf.getText().length()==11){
            String CPF = jFTCpf.getText();
        int n1 = CPF.charAt(0) - 48;        int n2 = CPF.charAt(1) - 48;
        int n3 = CPF.charAt(2) - 48;        int n4 = CPF.charAt(3) - 48;
        int n5 = CPF.charAt(4) - 48;        int n6 = CPF.charAt(5) - 48;
        int n7 = CPF.charAt(6) - 48;        int n8 = CPF.charAt(7) - 48;
        int n9 = CPF.charAt(8) - 48;        int n10 = CPF.charAt(9) - 48;
        int n11 = CPF.charAt(10) - 48;
        //Calculo aqui
        int sm = (n1*10)+(n2*9)+(n3*8)+(n4*7)+(n5*6)+(n6*5)+(n7*4)+(n8*3)+(n9*2);
        int DV1=11 - (sm % 11);
        int sm2= (n1*11)+(n2*10)+(n3*9)+(n4*8)+(n5*7)+(n6*6)+(n7*5)+(n8*4)+(n9*3)+(n10*2);
        int DV2=11 - (sm2 % 11);
        if (CPF.equals("00000000000") || CPF.equals("11111111111") || CPF.equals("22222222222")
            || CPF.equals("33333333333") || CPF.equals("44444444444") || CPF.equals("55555555555")
            || CPF.equals("66666666666") || CPF.equals("77777777777") || CPF.equals("88888888888")
            || CPF.equals("99999999999"))
        {
            jLValidacao.setVisible(true);
            jLValidacao.setForeground(Color.RED);
            jLValidacao.setText("CPF Inválido");
                
        }else{
            if((DV1==n10||(DV1==10&&n10==0)||(DV1==11&&n10==0))&&(DV2==n11||(DV2==10&&n11==0)||(DV2==11&&n11==0))){
               jLValidacao.setVisible(true);
            jLValidacao.setForeground(Color.BLACK);
            jLValidacao.setText("CPF Válido");
            //System.out.println(DV1+" "+DV2);
                
            }else{
             jLValidacao.setVisible(true);
            jLValidacao.setForeground(Color.RED);
            jLValidacao.setText("CPF Inválido");
            //System.out.println(DV1+" "+DV2);
                
            }
             //cpf = jFTCpf.getText();
        }
        }
         }
    
    //Verifica se a data escolhida não é inválida. Exemplo: 30/02/2012
    public void validaData(){

    if(jCDia.getSelectedIndex()!=0 && jCMes.getSelectedIndex()!=0 && jCAno.getSelectedIndex()!=0 ){
        int ano = Integer.parseInt(jCAno.getSelectedItem().toString()); 
          if(jCMes.getSelectedIndex()==2 && jCDia.getSelectedIndex()>29 ||(jCMes.getSelectedIndex()==4 && jCDia.getSelectedIndex()>30 ||jCMes.getSelectedIndex()==6 && jCDia.getSelectedIndex()>30
              ||jCMes.getSelectedIndex()==9 && jCDia.getSelectedIndex()>30 ||jCMes.getSelectedIndex()==11 && jCDia.getSelectedIndex()>30 
               ||jCDia.getSelectedIndex()==29 && jCMes.getSelectedIndex()==2 && ano%4!=0)){
           jLDtInvalida.setVisible(true);
           jLDtInvalida.setText("Data inválida");
           jLDtInvalida.setForeground(Color.RED);
       }else{
            jLDtInvalida.setText("");  
            jLDtInvalida.setVisible(false);
       }
    }else{
        jLDtInvalida.setText("");  
            jLDtInvalida.setVisible(false);
    }
  
}
    //Desabilita os campos
   public void desabilitaDados(){
        jTCodigo.setEditable(false);
        jTCrp.setEditable(false);
            jTNome.setEditable(false);
           jCDia.setEnabled(false);
            jCMes.setEnabled(false);
            jCAno.setEnabled(false);
            jTRg.setEditable(false);
            jFTCpf.setEditable(false);
            jTObs.setEnabled(false);
            jFTelRes.setEditable(false);
            jFTelCom.setEditable(false);
            jFCel.setEditable(false);
            jFId.setEditable(false);
            jFTelRec.setEditable(false);
            jTEmail.setEditable(false);
            jBSalvar.setEnabled(false);
             jBExcluir.setEnabled(false);
            jBCancelar.setEnabled(false);
           jBImprimir.setEnabled(false);
           jBAlterar.setEnabled(false);
           jBNovo.setEnabled(true);
    }
   
   //Habilita os campos para o usuário digitar
   public void habilitaDados(){
        jTCrp.setEditable(true);
            jTNome.setEditable(true);
            jCDia.setEnabled(true);
            jCMes.setEnabled(true);
            jCAno.setEnabled(true);
            jTRg.setEditable(true);
            jFTCpf.setEditable(true);
            jTObs.setEnabled(true);
            jFTelRes.setEditable(true);
            jFTelCom.setEditable(true);
            jFCel.setEditable(true);
            jFId.setEditable(true);
            jFTelRec.setEditable(true);
            jTEmail.setEditable(true);
            jBSalvar.setEnabled(true);
           jBCancelar.setEnabled(true);
           jBNovo.setEnabled(false);
   }
   
   //Limpa todos os campos
   public void limparDados(){
            jTCodigo.setText("");
            jTCrp.setText("");
            jTNome.setText("");
            jCDia.setSelectedIndex(0);
            jCMes.setSelectedIndex(0);
            jCAno.setSelectedIndex(0);
            jTRg.setText("");
            jFTCpf.setText("");
            jTObs.setText("");
            jFTelRes.setText("");
            jFTelCom.setText("");
            jFCel.setText("");
            jFId.setText("");
            jFTelRec.setText("");
            jTEmail.setText("");
            jLValidacao.setVisible(false);
            nome="";
            crp="";
            rg="";
            cpf="";
            tel="";
            obs = "";
            telCom="";
            cel="";
            id="";
            telRec="";
            email="";
            jLObrNome.setForeground(Color.BLACK);
            jLObrCRP.setForeground(Color.BLACK);
            jLObrDtNasc.setForeground(Color.BLACK);
            jLObrRg.setForeground(Color.BLACK);
            jLObrCpf.setForeground(Color.BLACK);
            jLObrContato.setForeground(Color.BLACK);
        }
   //Escolhe a forma de pesquisa de acordo com o que foi escolhido no ComboBox
   protected void listarPsicologos() throws SQLException{
        psicologoDao dao = new psicologoDao ();
        
        switch(jCBusca.getSelectedIndex()){
            case 0:
                 psicologos = dao.getListaNome("%" + jTPesquisar.getText() + "%");
        mostraPesquisa(psicologos);
                break;
              
            case 1:
                psicologos = dao.getListaCodigo(jTPesquisar.getText());
        mostraPesquisa(psicologos);
                break;
      
            case 2:
                 psicologos = dao.getListaCrp("%" + jTPesquisar.getText() + "%");
        mostraPesquisa(psicologos);
                break;    
           
        }
            
    }
   
   boolean msg = true;
   //Mostra os dados da pesquisa realizada
   private void mostraPesquisa(List<atributos> psicologos) {
       //Enquanto houver dados na tabela, ele remove a linha zero para evitar bugs
      while(tmPsicologos.getRowCount()>0){
          tmPsicologos.removeRow(0);
      }
      //Se a tabela for vazia, variável guarda valor para mostrar mensagem ao pressionar o botão Pesquisar
        if(psicologos.isEmpty()){
            msg=false;
         
      }else{
            msg=true;
          String []linha = new String [] {null, null, null, null};
          for (int i = 0; i < psicologos.size(); i++){
              tmPsicologos.addRow(linha);
              tmPsicologos.setValueAt(psicologos.get(i).getCodigoPsicologo(), i, 0);
              tmPsicologos.setValueAt(psicologos.get(i).getCrp(), i, 1);
              tmPsicologos.setValueAt(psicologos.get(i).getNomePsicologo(), i, 2);
              tmPsicologos.setValueAt(psicologos.get(i).getCpfPsicologo(), i, 3);
            
          }
      }
    }
   
   //Joga os dados selecionados na tabela para os TextFields
   private void linhaSelecionada(JTable tabela){
          
        if(jTDados.getSelectedRow()!=-1){
            habilitaDados();
            jBSalvar.setEnabled(false);
            jBAlterar.setEnabled(true);
            jBImprimir.setEnabled(true);
            jBExcluir.setEnabled(true);
        jTCodigo.setText(String.valueOf(psicologos.get(tabela.getSelectedRow()).getCodigoPsicologo()));
        jTCrp.setText(psicologos.get(tabela.getSelectedRow()).getCrp());
        jTNome.setText(psicologos.get(tabela.getSelectedRow()).getNomePsicologo());
        jCDia.setSelectedItem(psicologos.get(tabela.getSelectedRow()).getDiaPsicologo());
        jCMes.setSelectedItem(psicologos.get(tabela.getSelectedRow()).getMesPsicologo());
        jCAno.setSelectedItem(psicologos.get(tabela.getSelectedRow()).getAnoPsicologo());
        jLDtNasc.setText(psicologos.get(tabela.getSelectedRow()).getDtNascPsicologo());
        jTRg.setText(psicologos.get(tabela.getSelectedRow()).getRgPsicologo());
        jFTCpf.setText(psicologos.get(tabela.getSelectedRow()).getCpfPsicologo());
        jTObs.setText(psicologos.get(tabela.getSelectedRow()).getObsPsicologo());
        jFTelRes.setText(psicologos.get(tabela.getSelectedRow()).getTelResPsicologo());
        jFTelCom.setText(psicologos.get(tabela.getSelectedRow()).getTelComPsicologo());
        jFCel.setText(psicologos.get(tabela.getSelectedRow()).getCelPsicologo());
        jFId.setText(psicologos.get(tabela.getSelectedRow()).getIdPsicologo());
        jFTelRec.setText(psicologos.get(tabela.getSelectedRow()).getTelRecPsicologo());
        jTEmail.setText(psicologos.get(tabela.getSelectedRow()).getEmailPsicologo());
        crpigual = jTCrp.getText();
        nomeigual = jTNome.getText();
        cpfigual = jFTCpf.getText();
         crp = jTCrp.getText();
        nome = jTNome.getText();
        rg = jTRg.getText();
        cpf = jFTCpf.getText();
        obs = jTObs.getText();
        tel = jFTelRes.getText();
        telCom = jFTelCom.getText();
        cel = jFCel.getText();
        id = jFId.getText();
        telRec = jFTelRec.getText();
        email = jTEmail.getText();
        jTPsicologos.setSelectedComponent(jPDados);
        } else{
           limparDados();
       }
      
       jTPesquisar.setText("");
    }
   
   //Verifica se todos os campos obrigatórios estão preenchidos
   public boolean verificaDados(){
            if(jTCrp.getText().equals("") || jTNome.getText().equals("") || jCDia.getSelectedIndex()==0 ||
                jCMes.getSelectedIndex()==0 || jCAno.getSelectedIndex()==0 || 
                jLDtInvalida.getText().equals("Data inválida") ||  jFTCpf.getText().length()!=11 || 
                jFTCpf.getText().length()==11 && jLValidacao.getText().equals("CPF Inválido") || jTRg.getText().equals("") || 
                  jFTelRes.getText().length()!=14 
                && jFTelCom.getText().length()!=14  && jFCel.getText().length()<14  && jFId.getText().equals("") && jFTelRec.getText().length()!=14
                && jTEmail.getText().equals("")){
                JOptionPane.showMessageDialog(null,"Há campos obrigatórios não preenchidos.","Atenção",JOptionPane.WARNING_MESSAGE);
                
                //Torna as labels dos campos não preenchidos vermelhas
                if(jFTelRes.getText().length()!=14 && jFTelCom.getText().length()!=14 &&
                        jFCel.getText().length()!=14 && jFId.getText().equals("")&&
                        jFTelRec.getText().length()!=14 && jTEmail.getText().equals("")){
                    jLObrContato.setForeground(Color.red);
                    jTPsicologos.setSelectedComponent(jPContato);
                    jFTelRes.requestFocus();
                }else{
                     jLObrContato.setForeground(Color.black);
                }
                
                 if(jFTCpf.getText().length()!=11 ||  jFTCpf.getText().length()==11 && jLValidacao.getText().equals("CPF Inválido") ){
                    jLObrCpf.setForeground(Color.red);
                    jTPsicologos.setSelectedComponent(jPDados);
                    jFTCpf.requestFocus();
                }else{
                      jLObrCpf.setForeground(Color.black);
                }
                 
                 if(jTRg.getText().equals("")){
                    jLObrRg.setForeground(Color.red);
                    jTPsicologos.setSelectedComponent(jPDados);
                    jTRg.requestFocus();
                }else{
                    jLObrRg.setForeground(Color.black);
                }
                
                 if(jCDia.getSelectedIndex()==0 || jCMes.getSelectedIndex()==0 || jCAno.getSelectedIndex()==0
                        || jLDtInvalida.getText().equals("Data inválida")){
                    jLObrDtNasc.setForeground(Color.red);
                    jTPsicologos.setSelectedComponent(jPDados);
                    jCDia.requestFocus();
                }else{
                     jLObrDtNasc.setForeground(Color.black);
                }
                
                if(jTNome.getText().equals("")){
                    jLObrNome.setForeground(Color.red);
                    jTPsicologos.setSelectedComponent(jPDados);
                    jTNome.requestFocus();
                }else{
                    jLObrNome.setForeground(Color.black);
                }
                
                if(jTCrp.getText().equals("")){
                    jLObrCRP.setForeground(Color.red);
                    jTPsicologos.setSelectedComponent(jPDados);
                    jTCrp.requestFocus();
                }else{
                    jLObrCRP.setForeground(Color.black);
                }
                return false;
            }else{
                jLObrCRP.setForeground(Color.black);
                jLObrNome.setForeground(Color.black);
                jLObrDtNasc.setForeground(Color.black);
                jLObrRg.setForeground(Color.black);
                jLObrCpf.setForeground(Color.black);
                jLObrContato.setForeground(Color.black);
                return true;
            }
        }
   
   public void sair(){
       UIManager.put("OptionPane.noButtonText", "Não");  
         UIManager.put("OptionPane.yesButtonText", "Sim");
         int x = JOptionPane.showConfirmDialog(null, "Deseja encerrar o cadastro de psicólogos?", "Alerta",0, 2);
        
        if (x==0) {
        this.dispose();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFPsicologos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFPsicologos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFPsicologos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFPsicologos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JFPsicologos dialog = null;
                try {
                    dialog = new JFPsicologos(new javax.swing.JFrame(), true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null,"Problema ao abrir formulário de cadastro de psicólogos.\n"+ex);
                }
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAlterar;
    private javax.swing.JButton jBAnterior;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBExcluir;
    private javax.swing.JButton jBImprimir;
    private javax.swing.JButton jBNovo;
    private javax.swing.JButton jBPesquisa;
    private javax.swing.JButton jBPesquisar;
    private javax.swing.JButton jBProximo;
    private javax.swing.JButton jBProximo2;
    private javax.swing.JButton jBSalvar;
    private javax.swing.JButton jBVoltar;
    private javax.swing.JComboBox jCAno;
    private javax.swing.JComboBox jCBusca;
    private javax.swing.JComboBox jCDia;
    private javax.swing.JComboBox jCMes;
    private javax.swing.JFormattedTextField jFCel;
    private javax.swing.JFormattedTextField jFId;
    private javax.swing.JFormattedTextField jFTCpf;
    private javax.swing.JFormattedTextField jFTelCom;
    private javax.swing.JFormattedTextField jFTelRec;
    private javax.swing.JFormattedTextField jFTelRes;
    private javax.swing.JLabel jLBusca;
    private javax.swing.JLabel jLCel;
    private javax.swing.JLabel jLCodigo;
    private javax.swing.JLabel jLCpf;
    private javax.swing.JLabel jLCrp;
    private javax.swing.JLabel jLData;
    private javax.swing.JLabel jLDtInvalida;
    private javax.swing.JLabel jLDtNasc;
    private javax.swing.JLabel jLEmail;
    private javax.swing.JLabel jLId;
    private javax.swing.JLabel jLNome;
    private javax.swing.JLabel jLObrCRP;
    private javax.swing.JLabel jLObrContato;
    private javax.swing.JLabel jLObrCpf;
    private javax.swing.JLabel jLObrDtNasc;
    private javax.swing.JLabel jLObrNome;
    private javax.swing.JLabel jLObrRg;
    private javax.swing.JLabel jLObs;
    private javax.swing.JLabel jLRg;
    private javax.swing.JLabel jLTelC;
    private javax.swing.JLabel jLTelR;
    private javax.swing.JLabel jLTelRec;
    private javax.swing.JLabel jLValidacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPBotoes;
    private javax.swing.JPanel jPBusca;
    private javax.swing.JPanel jPContato;
    private javax.swing.JPanel jPContatos;
    private javax.swing.JPanel jPDados;
    private javax.swing.JPanel jPDadosGerais;
    private javax.swing.JPanel jPPesquisa;
    private javax.swing.JScrollPane jSDados;
    private javax.swing.JScrollPane jSObs;
    private javax.swing.JTextField jTCodigo;
    private javax.swing.JTextField jTCrp;
    private javax.swing.JTable jTDados;
    private javax.swing.JTextField jTEmail;
    private javax.swing.JTextField jTNome;
    private javax.swing.JTextArea jTObs;
    private javax.swing.JTextField jTPesquisar;
    private javax.swing.JTabbedPane jTPsicologos;
    private javax.swing.JTextField jTRg;
    // End of variables declaration//GEN-END:variables
}
